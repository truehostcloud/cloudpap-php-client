<?php
/**
 * CouponClaim
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cloudpap\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.34
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cloudpap\Client\Model;

use \ArrayAccess;
use \Cloudpap\Client\ObjectSerializer;

/**
 * CouponClaim Class Doc Comment
 *
 * @category Class
 * @package  Cloudpap\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponClaim implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CouponClaim';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coupon_code' => 'string',
        'billing_plan' => 'int',
        'backup_billing_plan' => 'int',
        'amount_cents' => 'int',
        'amount_cents_remaining' => 'int',
        'amount_currency' => 'string',
        'expiration_date' => '\DateTime',
        'frequency' => 'string',
        'frequency_duration' => 'int',
        'percentage_rate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coupon_code' => null,
        'billing_plan' => null,
        'backup_billing_plan' => null,
        'amount_cents' => null,
        'amount_cents_remaining' => null,
        'amount_currency' => null,
        'expiration_date' => 'date-time',
        'frequency' => null,
        'frequency_duration' => null,
        'percentage_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coupon_code' => 'coupon_code',
        'billing_plan' => 'billing_plan',
        'backup_billing_plan' => 'backup_billing_plan',
        'amount_cents' => 'amount_cents',
        'amount_cents_remaining' => 'amount_cents_remaining',
        'amount_currency' => 'amount_currency',
        'expiration_date' => 'expiration_date',
        'frequency' => 'frequency',
        'frequency_duration' => 'frequency_duration',
        'percentage_rate' => 'percentage_rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coupon_code' => 'setCouponCode',
        'billing_plan' => 'setBillingPlan',
        'backup_billing_plan' => 'setBackupBillingPlan',
        'amount_cents' => 'setAmountCents',
        'amount_cents_remaining' => 'setAmountCentsRemaining',
        'amount_currency' => 'setAmountCurrency',
        'expiration_date' => 'setExpirationDate',
        'frequency' => 'setFrequency',
        'frequency_duration' => 'setFrequencyDuration',
        'percentage_rate' => 'setPercentageRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coupon_code' => 'getCouponCode',
        'billing_plan' => 'getBillingPlan',
        'backup_billing_plan' => 'getBackupBillingPlan',
        'amount_cents' => 'getAmountCents',
        'amount_cents_remaining' => 'getAmountCentsRemaining',
        'amount_currency' => 'getAmountCurrency',
        'expiration_date' => 'getExpirationDate',
        'frequency' => 'getFrequency',
        'frequency_duration' => 'getFrequencyDuration',
        'percentage_rate' => 'getPercentageRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coupon_code'] = isset($data['coupon_code']) ? $data['coupon_code'] : null;
        $this->container['billing_plan'] = isset($data['billing_plan']) ? $data['billing_plan'] : null;
        $this->container['backup_billing_plan'] = isset($data['backup_billing_plan']) ? $data['backup_billing_plan'] : null;
        $this->container['amount_cents'] = isset($data['amount_cents']) ? $data['amount_cents'] : null;
        $this->container['amount_cents_remaining'] = isset($data['amount_cents_remaining']) ? $data['amount_cents_remaining'] : null;
        $this->container['amount_currency'] = isset($data['amount_currency']) ? $data['amount_currency'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['frequency_duration'] = isset($data['frequency_duration']) ? $data['frequency_duration'] : null;
        $this->container['percentage_rate'] = isset($data['percentage_rate']) ? $data['percentage_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['coupon_code'] === null) {
            $invalidProperties[] = "'coupon_code' can't be null";
        }
        if ((mb_strlen($this->container['coupon_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'coupon_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['billing_plan'] === null) {
            $invalidProperties[] = "'billing_plan' can't be null";
        }
        if (!is_null($this->container['amount_currency']) && (mb_strlen($this->container['amount_currency']) < 1)) {
            $invalidProperties[] = "invalid value for 'amount_currency', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['frequency']) && (mb_strlen($this->container['frequency']) < 1)) {
            $invalidProperties[] = "invalid value for 'frequency', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coupon_code
     *
     * @return string
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string $coupon_code coupon_code
     *
     * @return $this
     */
    public function setCouponCode($coupon_code)
    {

        if ((mb_strlen($coupon_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $coupon_code when calling CouponClaim., must be bigger than or equal to 1.');
        }

        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return int
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param int $billing_plan billing_plan
     *
     * @return $this
     */
    public function setBillingPlan($billing_plan)
    {
        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets backup_billing_plan
     *
     * @return int
     */
    public function getBackupBillingPlan()
    {
        return $this->container['backup_billing_plan'];
    }

    /**
     * Sets backup_billing_plan
     *
     * @param int $backup_billing_plan backup_billing_plan
     *
     * @return $this
     */
    public function setBackupBillingPlan($backup_billing_plan)
    {
        $this->container['backup_billing_plan'] = $backup_billing_plan;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int $amount_cents amount_cents
     *
     * @return $this
     */
    public function setAmountCents($amount_cents)
    {
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets amount_cents_remaining
     *
     * @return int
     */
    public function getAmountCentsRemaining()
    {
        return $this->container['amount_cents_remaining'];
    }

    /**
     * Sets amount_cents_remaining
     *
     * @param int $amount_cents_remaining amount_cents_remaining
     *
     * @return $this
     */
    public function setAmountCentsRemaining($amount_cents_remaining)
    {
        $this->container['amount_cents_remaining'] = $amount_cents_remaining;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return string
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param string $amount_currency amount_currency
     *
     * @return $this
     */
    public function setAmountCurrency($amount_currency)
    {

        if (!is_null($amount_currency) && (mb_strlen($amount_currency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $amount_currency when calling CouponClaim., must be bigger than or equal to 1.');
        }

        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {

        if (!is_null($frequency) && (mb_strlen($frequency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $frequency when calling CouponClaim., must be bigger than or equal to 1.');
        }

        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets frequency_duration
     *
     * @return int
     */
    public function getFrequencyDuration()
    {
        return $this->container['frequency_duration'];
    }

    /**
     * Sets frequency_duration
     *
     * @param int $frequency_duration frequency_duration
     *
     * @return $this
     */
    public function setFrequencyDuration($frequency_duration)
    {
        $this->container['frequency_duration'] = $frequency_duration;

        return $this;
    }

    /**
     * Gets percentage_rate
     *
     * @return int
     */
    public function getPercentageRate()
    {
        return $this->container['percentage_rate'];
    }

    /**
     * Sets percentage_rate
     *
     * @param int $percentage_rate percentage_rate
     *
     * @return $this
     */
    public function setPercentageRate($percentage_rate)
    {
        $this->container['percentage_rate'] = $percentage_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


