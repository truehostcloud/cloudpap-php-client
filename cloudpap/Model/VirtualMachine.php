<?php
/**
 * VirtualMachine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cloudpap\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.34
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cloudpap\Client\Model;

use \ArrayAccess;
use \Cloudpap\Client\ObjectSerializer;

/**
 * VirtualMachine Class Doc Comment
 *
 * @category Class
 * @package  Cloudpap\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VirtualMachine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VirtualMachine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'location_country_code' => 'string',
        'ip_address' => 'string',
        'os_version' => 'string',
        'location_region' => 'string',
        'state' => 'string',
        'raw_state' => 'string',
        'vnc_auth_token' => 'string',
        'vnc_url' => 'string',
        'name' => 'string',
        'uid' => 'string',
        'cpu' => 'float',
        'memory' => 'float',
        'root_disk_size' => 'float',
        'enable_guest_agent' => 'bool',
        'add_ipv4' => 'bool',
        'add_ipv6' => 'bool',
        'os_type' => 'string',
        'root_user' => 'string',
        'root_password' => 'string',
        'hostname' => 'string',
        'network_card_name' => 'string',
        'root_disk_name' => 'string',
        'vnc_token_updated' => '\DateTime',
        'state_reason' => 'string',
        'created_at' => '\DateTime',
        'template' => 'int',
        'image' => 'int',
        'ipv4' => 'int',
        'location' => 'int',
        'backup_template' => 'int',
        'tenant' => 'int',
        'legacy_billing_subscriptions' => 'int[]',
        'billing_subscriptions' => 'int[]',
        'periodic_tasks' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'location_country_code' => null,
        'ip_address' => null,
        'os_version' => null,
        'location_region' => null,
        'state' => null,
        'raw_state' => null,
        'vnc_auth_token' => null,
        'vnc_url' => null,
        'name' => null,
        'uid' => null,
        'cpu' => null,
        'memory' => null,
        'root_disk_size' => null,
        'enable_guest_agent' => null,
        'add_ipv4' => null,
        'add_ipv6' => null,
        'os_type' => null,
        'root_user' => null,
        'root_password' => null,
        'hostname' => null,
        'network_card_name' => null,
        'root_disk_name' => null,
        'vnc_token_updated' => 'date-time',
        'state_reason' => null,
        'created_at' => 'date-time',
        'template' => null,
        'image' => null,
        'ipv4' => null,
        'location' => null,
        'backup_template' => null,
        'tenant' => null,
        'legacy_billing_subscriptions' => null,
        'billing_subscriptions' => null,
        'periodic_tasks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'location_country_code' => 'location_country_code',
        'ip_address' => 'ip_address',
        'os_version' => 'os_version',
        'location_region' => 'location_region',
        'state' => 'state',
        'raw_state' => 'raw_state',
        'vnc_auth_token' => 'vnc_auth_token',
        'vnc_url' => 'vnc_url',
        'name' => 'name',
        'uid' => 'uid',
        'cpu' => 'cpu',
        'memory' => 'memory',
        'root_disk_size' => 'root_disk_size',
        'enable_guest_agent' => 'enable_guest_agent',
        'add_ipv4' => 'add_ipv4',
        'add_ipv6' => 'add_ipv6',
        'os_type' => 'os_type',
        'root_user' => 'root_user',
        'root_password' => 'root_password',
        'hostname' => 'hostname',
        'network_card_name' => 'network_card_name',
        'root_disk_name' => 'root_disk_name',
        'vnc_token_updated' => 'vnc_token_updated',
        'state_reason' => 'state_reason',
        'created_at' => 'created_at',
        'template' => 'template',
        'image' => 'image',
        'ipv4' => 'ipv4',
        'location' => 'location',
        'backup_template' => 'backup_template',
        'tenant' => 'tenant',
        'legacy_billing_subscriptions' => 'legacy_billing_subscriptions',
        'billing_subscriptions' => 'billing_subscriptions',
        'periodic_tasks' => 'periodic_tasks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'location_country_code' => 'setLocationCountryCode',
        'ip_address' => 'setIpAddress',
        'os_version' => 'setOsVersion',
        'location_region' => 'setLocationRegion',
        'state' => 'setState',
        'raw_state' => 'setRawState',
        'vnc_auth_token' => 'setVncAuthToken',
        'vnc_url' => 'setVncUrl',
        'name' => 'setName',
        'uid' => 'setUid',
        'cpu' => 'setCpu',
        'memory' => 'setMemory',
        'root_disk_size' => 'setRootDiskSize',
        'enable_guest_agent' => 'setEnableGuestAgent',
        'add_ipv4' => 'setAddIpv4',
        'add_ipv6' => 'setAddIpv6',
        'os_type' => 'setOsType',
        'root_user' => 'setRootUser',
        'root_password' => 'setRootPassword',
        'hostname' => 'setHostname',
        'network_card_name' => 'setNetworkCardName',
        'root_disk_name' => 'setRootDiskName',
        'vnc_token_updated' => 'setVncTokenUpdated',
        'state_reason' => 'setStateReason',
        'created_at' => 'setCreatedAt',
        'template' => 'setTemplate',
        'image' => 'setImage',
        'ipv4' => 'setIpv4',
        'location' => 'setLocation',
        'backup_template' => 'setBackupTemplate',
        'tenant' => 'setTenant',
        'legacy_billing_subscriptions' => 'setLegacyBillingSubscriptions',
        'billing_subscriptions' => 'setBillingSubscriptions',
        'periodic_tasks' => 'setPeriodicTasks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'location_country_code' => 'getLocationCountryCode',
        'ip_address' => 'getIpAddress',
        'os_version' => 'getOsVersion',
        'location_region' => 'getLocationRegion',
        'state' => 'getState',
        'raw_state' => 'getRawState',
        'vnc_auth_token' => 'getVncAuthToken',
        'vnc_url' => 'getVncUrl',
        'name' => 'getName',
        'uid' => 'getUid',
        'cpu' => 'getCpu',
        'memory' => 'getMemory',
        'root_disk_size' => 'getRootDiskSize',
        'enable_guest_agent' => 'getEnableGuestAgent',
        'add_ipv4' => 'getAddIpv4',
        'add_ipv6' => 'getAddIpv6',
        'os_type' => 'getOsType',
        'root_user' => 'getRootUser',
        'root_password' => 'getRootPassword',
        'hostname' => 'getHostname',
        'network_card_name' => 'getNetworkCardName',
        'root_disk_name' => 'getRootDiskName',
        'vnc_token_updated' => 'getVncTokenUpdated',
        'state_reason' => 'getStateReason',
        'created_at' => 'getCreatedAt',
        'template' => 'getTemplate',
        'image' => 'getImage',
        'ipv4' => 'getIpv4',
        'location' => 'getLocation',
        'backup_template' => 'getBackupTemplate',
        'tenant' => 'getTenant',
        'legacy_billing_subscriptions' => 'getLegacyBillingSubscriptions',
        'billing_subscriptions' => 'getBillingSubscriptions',
        'periodic_tasks' => 'getPeriodicTasks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OS_TYPE_WINDOWS = 'windows';
    const OS_TYPE_LINUX = 'linux';
    const OS_TYPE_SLES = 'SLEs';
    const OS_TYPE_DEBIAN = 'debian';
    const OS_TYPE_FEDORA = 'fedora';
    const OS_TYPE_GENTOO = 'gentoo';
    const OS_TYPE_ORACLE = 'oracle';
    const OS_TYPE_REDHAT = 'redhat';
    const OS_TYPE_OPEN_SUSE = 'openSUSE';
    const OS_TYPE_UBUNTU = 'ubuntu';
    const OS_TYPE_OTHER_LINUX = 'otherLinux';
    const STATE_REASON_EMPTY = '';
    const STATE_REASON_BACKUP_RESTORE = 'backup_restore';
    const STATE_REASON_USER_REQUESTED = 'user_requested';
    const STATE_REASON_BILLING = 'billing';
    const STATE_REASON_MAINTENANCE = 'maintenance';
    const STATE_REASON_ADMIN_REQUESTED = 'admin_requested';
    const STATE_REASON_UPGRADE = 'upgrade';
    const STATE_REASON_UPDATE_NETWORKING = 'update_networking';
    const STATE_REASON_PASSWORD_RESET = 'password_reset';
    const STATE_REASON_CHANGE_IMAGE = 'change_image';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsTypeAllowableValues()
    {
        return [
            self::OS_TYPE_WINDOWS,
            self::OS_TYPE_LINUX,
            self::OS_TYPE_SLES,
            self::OS_TYPE_DEBIAN,
            self::OS_TYPE_FEDORA,
            self::OS_TYPE_GENTOO,
            self::OS_TYPE_ORACLE,
            self::OS_TYPE_REDHAT,
            self::OS_TYPE_OPEN_SUSE,
            self::OS_TYPE_UBUNTU,
            self::OS_TYPE_OTHER_LINUX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateReasonAllowableValues()
    {
        return [
            self::STATE_REASON_EMPTY,
            self::STATE_REASON_BACKUP_RESTORE,
            self::STATE_REASON_USER_REQUESTED,
            self::STATE_REASON_BILLING,
            self::STATE_REASON_MAINTENANCE,
            self::STATE_REASON_ADMIN_REQUESTED,
            self::STATE_REASON_UPGRADE,
            self::STATE_REASON_UPDATE_NETWORKING,
            self::STATE_REASON_PASSWORD_RESET,
            self::STATE_REASON_CHANGE_IMAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_country_code'] = isset($data['location_country_code']) ? $data['location_country_code'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['location_region'] = isset($data['location_region']) ? $data['location_region'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['raw_state'] = isset($data['raw_state']) ? $data['raw_state'] : null;
        $this->container['vnc_auth_token'] = isset($data['vnc_auth_token']) ? $data['vnc_auth_token'] : null;
        $this->container['vnc_url'] = isset($data['vnc_url']) ? $data['vnc_url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['cpu'] = isset($data['cpu']) ? $data['cpu'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['root_disk_size'] = isset($data['root_disk_size']) ? $data['root_disk_size'] : null;
        $this->container['enable_guest_agent'] = isset($data['enable_guest_agent']) ? $data['enable_guest_agent'] : true;
        $this->container['add_ipv4'] = isset($data['add_ipv4']) ? $data['add_ipv4'] : null;
        $this->container['add_ipv6'] = isset($data['add_ipv6']) ? $data['add_ipv6'] : null;
        $this->container['os_type'] = isset($data['os_type']) ? $data['os_type'] : null;
        $this->container['root_user'] = isset($data['root_user']) ? $data['root_user'] : null;
        $this->container['root_password'] = isset($data['root_password']) ? $data['root_password'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['network_card_name'] = isset($data['network_card_name']) ? $data['network_card_name'] : null;
        $this->container['root_disk_name'] = isset($data['root_disk_name']) ? $data['root_disk_name'] : null;
        $this->container['vnc_token_updated'] = isset($data['vnc_token_updated']) ? $data['vnc_token_updated'] : null;
        $this->container['state_reason'] = isset($data['state_reason']) ? $data['state_reason'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['ipv4'] = isset($data['ipv4']) ? $data['ipv4'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['backup_template'] = isset($data['backup_template']) ? $data['backup_template'] : null;
        $this->container['tenant'] = isset($data['tenant']) ? $data['tenant'] : null;
        $this->container['legacy_billing_subscriptions'] = isset($data['legacy_billing_subscriptions']) ? $data['legacy_billing_subscriptions'] : null;
        $this->container['billing_subscriptions'] = isset($data['billing_subscriptions']) ? $data['billing_subscriptions'] : null;
        $this->container['periodic_tasks'] = isset($data['periodic_tasks']) ? $data['periodic_tasks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['location_country_code']) && (mb_strlen($this->container['location_country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'location_country_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['os_version']) && (mb_strlen($this->container['os_version']) < 1)) {
            $invalidProperties[] = "invalid value for 'os_version', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['location_region']) && (mb_strlen($this->container['location_region']) < 1)) {
            $invalidProperties[] = "invalid value for 'location_region', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['raw_state']) && (mb_strlen($this->container['raw_state']) < 1)) {
            $invalidProperties[] = "invalid value for 'raw_state', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vnc_auth_token']) && (mb_strlen($this->container['vnc_auth_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'vnc_auth_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vnc_url']) && (mb_strlen($this->container['vnc_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'vnc_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['uid']) && (mb_strlen($this->container['uid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uid', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getOsTypeAllowableValues();
        if (!is_null($this->container['os_type']) && !in_array($this->container['os_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'os_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['root_user']) && (mb_strlen($this->container['root_user']) > 255)) {
            $invalidProperties[] = "invalid value for 'root_user', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['root_password'] === null) {
            $invalidProperties[] = "'root_password' can't be null";
        }
        if ((mb_strlen($this->container['root_password']) > 255)) {
            $invalidProperties[] = "invalid value for 'root_password', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['root_password']) < 1)) {
            $invalidProperties[] = "invalid value for 'root_password', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hostname']) && (mb_strlen($this->container['hostname']) < 1)) {
            $invalidProperties[] = "invalid value for 'hostname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['network_card_name']) && (mb_strlen($this->container['network_card_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'network_card_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['root_disk_name']) && (mb_strlen($this->container['root_disk_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'root_disk_name', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStateReasonAllowableValues();
        if (!is_null($this->container['state_reason']) && !in_array($this->container['state_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['tenant'] === null) {
            $invalidProperties[] = "'tenant' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_country_code
     *
     * @return string
     */
    public function getLocationCountryCode()
    {
        return $this->container['location_country_code'];
    }

    /**
     * Sets location_country_code
     *
     * @param string $location_country_code location_country_code
     *
     * @return $this
     */
    public function setLocationCountryCode($location_country_code)
    {

        if (!is_null($location_country_code) && (mb_strlen($location_country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location_country_code when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['location_country_code'] = $location_country_code;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {

        if (!is_null($ip_address) && (mb_strlen($ip_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return string
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param string $os_version os_version
     *
     * @return $this
     */
    public function setOsVersion($os_version)
    {

        if (!is_null($os_version) && (mb_strlen($os_version) < 1)) {
            throw new \InvalidArgumentException('invalid length for $os_version when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets location_region
     *
     * @return string
     */
    public function getLocationRegion()
    {
        return $this->container['location_region'];
    }

    /**
     * Sets location_region
     *
     * @param string $location_region location_region
     *
     * @return $this
     */
    public function setLocationRegion($location_region)
    {

        if (!is_null($location_region) && (mb_strlen($location_region) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location_region when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['location_region'] = $location_region;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {

        if (!is_null($state) && (mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets raw_state
     *
     * @return string
     */
    public function getRawState()
    {
        return $this->container['raw_state'];
    }

    /**
     * Sets raw_state
     *
     * @param string $raw_state raw_state
     *
     * @return $this
     */
    public function setRawState($raw_state)
    {

        if (!is_null($raw_state) && (mb_strlen($raw_state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $raw_state when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['raw_state'] = $raw_state;

        return $this;
    }

    /**
     * Gets vnc_auth_token
     *
     * @return string
     */
    public function getVncAuthToken()
    {
        return $this->container['vnc_auth_token'];
    }

    /**
     * Sets vnc_auth_token
     *
     * @param string $vnc_auth_token vnc_auth_token
     *
     * @return $this
     */
    public function setVncAuthToken($vnc_auth_token)
    {

        if (!is_null($vnc_auth_token) && (mb_strlen($vnc_auth_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vnc_auth_token when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['vnc_auth_token'] = $vnc_auth_token;

        return $this;
    }

    /**
     * Gets vnc_url
     *
     * @return string
     */
    public function getVncUrl()
    {
        return $this->container['vnc_url'];
    }

    /**
     * Sets vnc_url
     *
     * @param string $vnc_url vnc_url
     *
     * @return $this
     */
    public function setVncUrl($vnc_url)
    {

        if (!is_null($vnc_url) && (mb_strlen($vnc_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vnc_url when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['vnc_url'] = $vnc_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {

        if (!is_null($name) && (mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {

        if (!is_null($uid) && (mb_strlen($uid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uid when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets cpu
     *
     * @return float
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param float $cpu cpu
     *
     * @return $this
     */
    public function setCpu($cpu)
    {
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return float
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param float $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets root_disk_size
     *
     * @return float
     */
    public function getRootDiskSize()
    {
        return $this->container['root_disk_size'];
    }

    /**
     * Sets root_disk_size
     *
     * @param float $root_disk_size root_disk_size
     *
     * @return $this
     */
    public function setRootDiskSize($root_disk_size)
    {
        $this->container['root_disk_size'] = $root_disk_size;

        return $this;
    }

    /**
     * Gets enable_guest_agent
     *
     * @return bool
     */
    public function getEnableGuestAgent()
    {
        return $this->container['enable_guest_agent'];
    }

    /**
     * Sets enable_guest_agent
     *
     * @param bool $enable_guest_agent enable_guest_agent
     *
     * @return $this
     */
    public function setEnableGuestAgent($enable_guest_agent)
    {
        $this->container['enable_guest_agent'] = $enable_guest_agent;

        return $this;
    }

    /**
     * Gets add_ipv4
     *
     * @return bool
     */
    public function getAddIpv4()
    {
        return $this->container['add_ipv4'];
    }

    /**
     * Sets add_ipv4
     *
     * @param bool $add_ipv4 add_ipv4
     *
     * @return $this
     */
    public function setAddIpv4($add_ipv4)
    {
        $this->container['add_ipv4'] = $add_ipv4;

        return $this;
    }

    /**
     * Gets add_ipv6
     *
     * @return bool
     */
    public function getAddIpv6()
    {
        return $this->container['add_ipv6'];
    }

    /**
     * Sets add_ipv6
     *
     * @param bool $add_ipv6 add_ipv6
     *
     * @return $this
     */
    public function setAddIpv6($add_ipv6)
    {
        $this->container['add_ipv6'] = $add_ipv6;

        return $this;
    }

    /**
     * Gets os_type
     *
     * @return string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     *
     * @param string $os_type os_type
     *
     * @return $this
     */
    public function setOsType($os_type)
    {
        $allowedValues = $this->getOsTypeAllowableValues();
        if (!is_null($os_type) && !in_array($os_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'os_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets root_user
     *
     * @return string
     */
    public function getRootUser()
    {
        return $this->container['root_user'];
    }

    /**
     * Sets root_user
     *
     * @param string $root_user root_user
     *
     * @return $this
     */
    public function setRootUser($root_user)
    {
        if (!is_null($root_user) && (mb_strlen($root_user) > 255)) {
            throw new \InvalidArgumentException('invalid length for $root_user when calling VirtualMachine., must be smaller than or equal to 255.');
        }

        $this->container['root_user'] = $root_user;

        return $this;
    }

    /**
     * Gets root_password
     *
     * @return string
     */
    public function getRootPassword()
    {
        return $this->container['root_password'];
    }

    /**
     * Sets root_password
     *
     * @param string $root_password root_password
     *
     * @return $this
     */
    public function setRootPassword($root_password)
    {
        if ((mb_strlen($root_password) > 255)) {
            throw new \InvalidArgumentException('invalid length for $root_password when calling VirtualMachine., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($root_password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $root_password when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['root_password'] = $root_password;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {

        if (!is_null($hostname) && (mb_strlen($hostname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hostname when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets network_card_name
     *
     * @return string
     */
    public function getNetworkCardName()
    {
        return $this->container['network_card_name'];
    }

    /**
     * Sets network_card_name
     *
     * @param string $network_card_name network_card_name
     *
     * @return $this
     */
    public function setNetworkCardName($network_card_name)
    {

        if (!is_null($network_card_name) && (mb_strlen($network_card_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $network_card_name when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['network_card_name'] = $network_card_name;

        return $this;
    }

    /**
     * Gets root_disk_name
     *
     * @return string
     */
    public function getRootDiskName()
    {
        return $this->container['root_disk_name'];
    }

    /**
     * Sets root_disk_name
     *
     * @param string $root_disk_name root_disk_name
     *
     * @return $this
     */
    public function setRootDiskName($root_disk_name)
    {

        if (!is_null($root_disk_name) && (mb_strlen($root_disk_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $root_disk_name when calling VirtualMachine., must be bigger than or equal to 1.');
        }

        $this->container['root_disk_name'] = $root_disk_name;

        return $this;
    }

    /**
     * Gets vnc_token_updated
     *
     * @return \DateTime
     */
    public function getVncTokenUpdated()
    {
        return $this->container['vnc_token_updated'];
    }

    /**
     * Sets vnc_token_updated
     *
     * @param \DateTime $vnc_token_updated vnc_token_updated
     *
     * @return $this
     */
    public function setVncTokenUpdated($vnc_token_updated)
    {
        $this->container['vnc_token_updated'] = $vnc_token_updated;

        return $this;
    }

    /**
     * Gets state_reason
     *
     * @return string
     */
    public function getStateReason()
    {
        return $this->container['state_reason'];
    }

    /**
     * Sets state_reason
     *
     * @param string $state_reason state_reason
     *
     * @return $this
     */
    public function setStateReason($state_reason)
    {
        $allowedValues = $this->getStateReasonAllowableValues();
        if (!is_null($state_reason) && !in_array($state_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state_reason'] = $state_reason;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets template
     *
     * @return int
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param int $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets image
     *
     * @return int
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param int $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets ipv4
     *
     * @return int
     */
    public function getIpv4()
    {
        return $this->container['ipv4'];
    }

    /**
     * Sets ipv4
     *
     * @param int $ipv4 ipv4
     *
     * @return $this
     */
    public function setIpv4($ipv4)
    {
        $this->container['ipv4'] = $ipv4;

        return $this;
    }

    /**
     * Gets location
     *
     * @return int
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param int $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets backup_template
     *
     * @return int
     */
    public function getBackupTemplate()
    {
        return $this->container['backup_template'];
    }

    /**
     * Sets backup_template
     *
     * @param int $backup_template backup_template
     *
     * @return $this
     */
    public function setBackupTemplate($backup_template)
    {
        $this->container['backup_template'] = $backup_template;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return int
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param int $tenant tenant
     *
     * @return $this
     */
    public function setTenant($tenant)
    {
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets legacy_billing_subscriptions
     *
     * @return int[]
     */
    public function getLegacyBillingSubscriptions()
    {
        return $this->container['legacy_billing_subscriptions'];
    }

    /**
     * Sets legacy_billing_subscriptions
     *
     * @param int[] $legacy_billing_subscriptions legacy_billing_subscriptions
     *
     * @return $this
     */
    public function setLegacyBillingSubscriptions($legacy_billing_subscriptions)
    {
        $this->container['legacy_billing_subscriptions'] = $legacy_billing_subscriptions;

        return $this;
    }

    /**
     * Gets billing_subscriptions
     *
     * @return int[]
     */
    public function getBillingSubscriptions()
    {
        return $this->container['billing_subscriptions'];
    }

    /**
     * Sets billing_subscriptions
     *
     * @param int[] $billing_subscriptions billing_subscriptions
     *
     * @return $this
     */
    public function setBillingSubscriptions($billing_subscriptions)
    {
        $this->container['billing_subscriptions'] = $billing_subscriptions;

        return $this;
    }

    /**
     * Gets periodic_tasks
     *
     * @return int[]
     */
    public function getPeriodicTasks()
    {
        return $this->container['periodic_tasks'];
    }

    /**
     * Sets periodic_tasks
     *
     * @param int[] $periodic_tasks periodic_tasks
     *
     * @return $this
     */
    public function setPeriodicTasks($periodic_tasks)
    {
        $this->container['periodic_tasks'] = $periodic_tasks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


