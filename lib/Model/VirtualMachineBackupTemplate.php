<?php
/**
 * VirtualMachineBackupTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.33
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VirtualMachineBackupTemplate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VirtualMachineBackupTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VirtualMachineBackupTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'monthly_plan_amount' => 'string',
        'weekly_plan_amount' => 'string',
        'yearly_plan_amount' => 'string',
        'plan_currency' => 'string',
        'plan_price_display' => 'string',
        'name' => 'string',
        'description' => 'string',
        'hourly_frequency_retention' => 'int',
        'daily_frequency_retention' => 'int',
        'weekly_frequency_retention' => 'int',
        'monthly_frequency_retention' => 'int',
        'legacy_billing_plan' => 'int',
        'billing_plan' => 'int',
        'crontab_schedule' => 'int',
        'templates' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'monthly_plan_amount' => 'decimal',
        'weekly_plan_amount' => 'decimal',
        'yearly_plan_amount' => 'decimal',
        'plan_currency' => null,
        'plan_price_display' => null,
        'name' => null,
        'description' => null,
        'hourly_frequency_retention' => null,
        'daily_frequency_retention' => null,
        'weekly_frequency_retention' => null,
        'monthly_frequency_retention' => null,
        'legacy_billing_plan' => null,
        'billing_plan' => null,
        'crontab_schedule' => null,
        'templates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'monthly_plan_amount' => 'monthly_plan_amount',
        'weekly_plan_amount' => 'weekly_plan_amount',
        'yearly_plan_amount' => 'yearly_plan_amount',
        'plan_currency' => 'plan_currency',
        'plan_price_display' => 'plan_price_display',
        'name' => 'name',
        'description' => 'description',
        'hourly_frequency_retention' => 'hourly_frequency_retention',
        'daily_frequency_retention' => 'daily_frequency_retention',
        'weekly_frequency_retention' => 'weekly_frequency_retention',
        'monthly_frequency_retention' => 'monthly_frequency_retention',
        'legacy_billing_plan' => 'legacy_billing_plan',
        'billing_plan' => 'billing_plan',
        'crontab_schedule' => 'crontab_schedule',
        'templates' => 'templates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'monthly_plan_amount' => 'setMonthlyPlanAmount',
        'weekly_plan_amount' => 'setWeeklyPlanAmount',
        'yearly_plan_amount' => 'setYearlyPlanAmount',
        'plan_currency' => 'setPlanCurrency',
        'plan_price_display' => 'setPlanPriceDisplay',
        'name' => 'setName',
        'description' => 'setDescription',
        'hourly_frequency_retention' => 'setHourlyFrequencyRetention',
        'daily_frequency_retention' => 'setDailyFrequencyRetention',
        'weekly_frequency_retention' => 'setWeeklyFrequencyRetention',
        'monthly_frequency_retention' => 'setMonthlyFrequencyRetention',
        'legacy_billing_plan' => 'setLegacyBillingPlan',
        'billing_plan' => 'setBillingPlan',
        'crontab_schedule' => 'setCrontabSchedule',
        'templates' => 'setTemplates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'monthly_plan_amount' => 'getMonthlyPlanAmount',
        'weekly_plan_amount' => 'getWeeklyPlanAmount',
        'yearly_plan_amount' => 'getYearlyPlanAmount',
        'plan_currency' => 'getPlanCurrency',
        'plan_price_display' => 'getPlanPriceDisplay',
        'name' => 'getName',
        'description' => 'getDescription',
        'hourly_frequency_retention' => 'getHourlyFrequencyRetention',
        'daily_frequency_retention' => 'getDailyFrequencyRetention',
        'weekly_frequency_retention' => 'getWeeklyFrequencyRetention',
        'monthly_frequency_retention' => 'getMonthlyFrequencyRetention',
        'legacy_billing_plan' => 'getLegacyBillingPlan',
        'billing_plan' => 'getBillingPlan',
        'crontab_schedule' => 'getCrontabSchedule',
        'templates' => 'getTemplates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['monthly_plan_amount'] = isset($data['monthly_plan_amount']) ? $data['monthly_plan_amount'] : null;
        $this->container['weekly_plan_amount'] = isset($data['weekly_plan_amount']) ? $data['weekly_plan_amount'] : null;
        $this->container['yearly_plan_amount'] = isset($data['yearly_plan_amount']) ? $data['yearly_plan_amount'] : null;
        $this->container['plan_currency'] = isset($data['plan_currency']) ? $data['plan_currency'] : null;
        $this->container['plan_price_display'] = isset($data['plan_price_display']) ? $data['plan_price_display'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hourly_frequency_retention'] = isset($data['hourly_frequency_retention']) ? $data['hourly_frequency_retention'] : null;
        $this->container['daily_frequency_retention'] = isset($data['daily_frequency_retention']) ? $data['daily_frequency_retention'] : null;
        $this->container['weekly_frequency_retention'] = isset($data['weekly_frequency_retention']) ? $data['weekly_frequency_retention'] : null;
        $this->container['monthly_frequency_retention'] = isset($data['monthly_frequency_retention']) ? $data['monthly_frequency_retention'] : null;
        $this->container['legacy_billing_plan'] = isset($data['legacy_billing_plan']) ? $data['legacy_billing_plan'] : null;
        $this->container['billing_plan'] = isset($data['billing_plan']) ? $data['billing_plan'] : null;
        $this->container['crontab_schedule'] = isset($data['crontab_schedule']) ? $data['crontab_schedule'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['plan_currency']) && (mb_strlen($this->container['plan_currency']) < 1)) {
            $invalidProperties[] = "invalid value for 'plan_currency', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['plan_price_display']) && (mb_strlen($this->container['plan_price_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'plan_price_display', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hourly_frequency_retention']) && ($this->container['hourly_frequency_retention'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'hourly_frequency_retention', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['hourly_frequency_retention']) && ($this->container['hourly_frequency_retention'] < 0)) {
            $invalidProperties[] = "invalid value for 'hourly_frequency_retention', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['daily_frequency_retention']) && ($this->container['daily_frequency_retention'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'daily_frequency_retention', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['daily_frequency_retention']) && ($this->container['daily_frequency_retention'] < 0)) {
            $invalidProperties[] = "invalid value for 'daily_frequency_retention', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weekly_frequency_retention']) && ($this->container['weekly_frequency_retention'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'weekly_frequency_retention', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['weekly_frequency_retention']) && ($this->container['weekly_frequency_retention'] < 0)) {
            $invalidProperties[] = "invalid value for 'weekly_frequency_retention', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['monthly_frequency_retention']) && ($this->container['monthly_frequency_retention'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'monthly_frequency_retention', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['monthly_frequency_retention']) && ($this->container['monthly_frequency_retention'] < 0)) {
            $invalidProperties[] = "invalid value for 'monthly_frequency_retention', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets monthly_plan_amount
     *
     * @return string
     */
    public function getMonthlyPlanAmount()
    {
        return $this->container['monthly_plan_amount'];
    }

    /**
     * Sets monthly_plan_amount
     *
     * @param string $monthly_plan_amount monthly_plan_amount
     *
     * @return $this
     */
    public function setMonthlyPlanAmount($monthly_plan_amount)
    {
        $this->container['monthly_plan_amount'] = $monthly_plan_amount;

        return $this;
    }

    /**
     * Gets weekly_plan_amount
     *
     * @return string
     */
    public function getWeeklyPlanAmount()
    {
        return $this->container['weekly_plan_amount'];
    }

    /**
     * Sets weekly_plan_amount
     *
     * @param string $weekly_plan_amount weekly_plan_amount
     *
     * @return $this
     */
    public function setWeeklyPlanAmount($weekly_plan_amount)
    {
        $this->container['weekly_plan_amount'] = $weekly_plan_amount;

        return $this;
    }

    /**
     * Gets yearly_plan_amount
     *
     * @return string
     */
    public function getYearlyPlanAmount()
    {
        return $this->container['yearly_plan_amount'];
    }

    /**
     * Sets yearly_plan_amount
     *
     * @param string $yearly_plan_amount yearly_plan_amount
     *
     * @return $this
     */
    public function setYearlyPlanAmount($yearly_plan_amount)
    {
        $this->container['yearly_plan_amount'] = $yearly_plan_amount;

        return $this;
    }

    /**
     * Gets plan_currency
     *
     * @return string
     */
    public function getPlanCurrency()
    {
        return $this->container['plan_currency'];
    }

    /**
     * Sets plan_currency
     *
     * @param string $plan_currency plan_currency
     *
     * @return $this
     */
    public function setPlanCurrency($plan_currency)
    {

        if (!is_null($plan_currency) && (mb_strlen($plan_currency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $plan_currency when calling VirtualMachineBackupTemplate., must be bigger than or equal to 1.');
        }

        $this->container['plan_currency'] = $plan_currency;

        return $this;
    }

    /**
     * Gets plan_price_display
     *
     * @return string
     */
    public function getPlanPriceDisplay()
    {
        return $this->container['plan_price_display'];
    }

    /**
     * Sets plan_price_display
     *
     * @param string $plan_price_display plan_price_display
     *
     * @return $this
     */
    public function setPlanPriceDisplay($plan_price_display)
    {

        if (!is_null($plan_price_display) && (mb_strlen($plan_price_display) < 1)) {
            throw new \InvalidArgumentException('invalid length for $plan_price_display when calling VirtualMachineBackupTemplate., must be bigger than or equal to 1.');
        }

        $this->container['plan_price_display'] = $plan_price_display;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VirtualMachineBackupTemplate., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VirtualMachineBackupTemplate., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hourly_frequency_retention
     *
     * @return int
     */
    public function getHourlyFrequencyRetention()
    {
        return $this->container['hourly_frequency_retention'];
    }

    /**
     * Sets hourly_frequency_retention
     *
     * @param int $hourly_frequency_retention hourly_frequency_retention
     *
     * @return $this
     */
    public function setHourlyFrequencyRetention($hourly_frequency_retention)
    {

        if (!is_null($hourly_frequency_retention) && ($hourly_frequency_retention > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $hourly_frequency_retention when calling VirtualMachineBackupTemplate., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($hourly_frequency_retention) && ($hourly_frequency_retention < 0)) {
            throw new \InvalidArgumentException('invalid value for $hourly_frequency_retention when calling VirtualMachineBackupTemplate., must be bigger than or equal to 0.');
        }

        $this->container['hourly_frequency_retention'] = $hourly_frequency_retention;

        return $this;
    }

    /**
     * Gets daily_frequency_retention
     *
     * @return int
     */
    public function getDailyFrequencyRetention()
    {
        return $this->container['daily_frequency_retention'];
    }

    /**
     * Sets daily_frequency_retention
     *
     * @param int $daily_frequency_retention daily_frequency_retention
     *
     * @return $this
     */
    public function setDailyFrequencyRetention($daily_frequency_retention)
    {

        if (!is_null($daily_frequency_retention) && ($daily_frequency_retention > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $daily_frequency_retention when calling VirtualMachineBackupTemplate., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($daily_frequency_retention) && ($daily_frequency_retention < 0)) {
            throw new \InvalidArgumentException('invalid value for $daily_frequency_retention when calling VirtualMachineBackupTemplate., must be bigger than or equal to 0.');
        }

        $this->container['daily_frequency_retention'] = $daily_frequency_retention;

        return $this;
    }

    /**
     * Gets weekly_frequency_retention
     *
     * @return int
     */
    public function getWeeklyFrequencyRetention()
    {
        return $this->container['weekly_frequency_retention'];
    }

    /**
     * Sets weekly_frequency_retention
     *
     * @param int $weekly_frequency_retention weekly_frequency_retention
     *
     * @return $this
     */
    public function setWeeklyFrequencyRetention($weekly_frequency_retention)
    {

        if (!is_null($weekly_frequency_retention) && ($weekly_frequency_retention > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $weekly_frequency_retention when calling VirtualMachineBackupTemplate., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($weekly_frequency_retention) && ($weekly_frequency_retention < 0)) {
            throw new \InvalidArgumentException('invalid value for $weekly_frequency_retention when calling VirtualMachineBackupTemplate., must be bigger than or equal to 0.');
        }

        $this->container['weekly_frequency_retention'] = $weekly_frequency_retention;

        return $this;
    }

    /**
     * Gets monthly_frequency_retention
     *
     * @return int
     */
    public function getMonthlyFrequencyRetention()
    {
        return $this->container['monthly_frequency_retention'];
    }

    /**
     * Sets monthly_frequency_retention
     *
     * @param int $monthly_frequency_retention monthly_frequency_retention
     *
     * @return $this
     */
    public function setMonthlyFrequencyRetention($monthly_frequency_retention)
    {

        if (!is_null($monthly_frequency_retention) && ($monthly_frequency_retention > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $monthly_frequency_retention when calling VirtualMachineBackupTemplate., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($monthly_frequency_retention) && ($monthly_frequency_retention < 0)) {
            throw new \InvalidArgumentException('invalid value for $monthly_frequency_retention when calling VirtualMachineBackupTemplate., must be bigger than or equal to 0.');
        }

        $this->container['monthly_frequency_retention'] = $monthly_frequency_retention;

        return $this;
    }

    /**
     * Gets legacy_billing_plan
     *
     * @return int
     */
    public function getLegacyBillingPlan()
    {
        return $this->container['legacy_billing_plan'];
    }

    /**
     * Sets legacy_billing_plan
     *
     * @param int $legacy_billing_plan legacy_billing_plan
     *
     * @return $this
     */
    public function setLegacyBillingPlan($legacy_billing_plan)
    {
        $this->container['legacy_billing_plan'] = $legacy_billing_plan;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return int
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param int $billing_plan billing_plan
     *
     * @return $this
     */
    public function setBillingPlan($billing_plan)
    {
        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets crontab_schedule
     *
     * @return int
     */
    public function getCrontabSchedule()
    {
        return $this->container['crontab_schedule'];
    }

    /**
     * Sets crontab_schedule
     *
     * @param int $crontab_schedule crontab_schedule
     *
     * @return $this
     */
    public function setCrontabSchedule($crontab_schedule)
    {
        $this->container['crontab_schedule'] = $crontab_schedule;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return int[]
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param int[] $templates templates
     *
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


