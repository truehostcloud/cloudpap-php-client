<?php
/**
 * SocialLogin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.33
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SocialLogin Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SocialLogin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SocialLogin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'social_access_token' => 'string',
        'refresh_token' => 'string',
        'access_token' => 'string',
        'access_token_lifetime_seconds' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'social_access_token' => null,
        'refresh_token' => null,
        'access_token' => null,
        'access_token_lifetime_seconds' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'social_access_token' => 'social_access_token',
        'refresh_token' => 'refresh_token',
        'access_token' => 'access_token',
        'access_token_lifetime_seconds' => 'access_token_lifetime_seconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'social_access_token' => 'setSocialAccessToken',
        'refresh_token' => 'setRefreshToken',
        'access_token' => 'setAccessToken',
        'access_token_lifetime_seconds' => 'setAccessTokenLifetimeSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'social_access_token' => 'getSocialAccessToken',
        'refresh_token' => 'getRefreshToken',
        'access_token' => 'getAccessToken',
        'access_token_lifetime_seconds' => 'getAccessTokenLifetimeSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['social_access_token'] = isset($data['social_access_token']) ? $data['social_access_token'] : null;
        $this->container['refresh_token'] = isset($data['refresh_token']) ? $data['refresh_token'] : null;
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['access_token_lifetime_seconds'] = isset($data['access_token_lifetime_seconds']) ? $data['access_token_lifetime_seconds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['social_access_token'] === null) {
            $invalidProperties[] = "'social_access_token' can't be null";
        }
        if ((mb_strlen($this->container['social_access_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'social_access_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['refresh_token']) && (mb_strlen($this->container['refresh_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'refresh_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['access_token']) && (mb_strlen($this->container['access_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'access_token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets social_access_token
     *
     * @return string
     */
    public function getSocialAccessToken()
    {
        return $this->container['social_access_token'];
    }

    /**
     * Sets social_access_token
     *
     * @param string $social_access_token social_access_token
     *
     * @return $this
     */
    public function setSocialAccessToken($social_access_token)
    {

        if ((mb_strlen($social_access_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $social_access_token when calling SocialLogin., must be bigger than or equal to 1.');
        }

        $this->container['social_access_token'] = $social_access_token;

        return $this;
    }

    /**
     * Gets refresh_token
     *
     * @return string
     */
    public function getRefreshToken()
    {
        return $this->container['refresh_token'];
    }

    /**
     * Sets refresh_token
     *
     * @param string $refresh_token refresh_token
     *
     * @return $this
     */
    public function setRefreshToken($refresh_token)
    {

        if (!is_null($refresh_token) && (mb_strlen($refresh_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $refresh_token when calling SocialLogin., must be bigger than or equal to 1.');
        }

        $this->container['refresh_token'] = $refresh_token;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {

        if (!is_null($access_token) && (mb_strlen($access_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $access_token when calling SocialLogin., must be bigger than or equal to 1.');
        }

        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets access_token_lifetime_seconds
     *
     * @return int
     */
    public function getAccessTokenLifetimeSeconds()
    {
        return $this->container['access_token_lifetime_seconds'];
    }

    /**
     * Sets access_token_lifetime_seconds
     *
     * @param int $access_token_lifetime_seconds access_token_lifetime_seconds
     *
     * @return $this
     */
    public function setAccessTokenLifetimeSeconds($access_token_lifetime_seconds)
    {
        $this->container['access_token_lifetime_seconds'] = $access_token_lifetime_seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


