<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.33
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'url' => 'string',
        'customer_reference' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'company' => 'string',
        'email' => 'string',
        'address_1' => 'string',
        'address_2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip_code' => 'string',
        'country' => 'string',
        'currency' => 'string',
        'phone' => 'string',
        'extra' => 'string',
        'sales_tax_number' => 'string',
        'sales_tax_name' => 'string',
        'sales_tax_percent' => 'string',
        'consolidated_billing' => 'bool',
        'subscriptions' => 'string[]',
        'payment_methods' => 'string',
        'transactions' => 'string',
        'meta' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'url' => 'uri',
        'customer_reference' => null,
        'first_name' => null,
        'last_name' => null,
        'company' => null,
        'email' => null,
        'address_1' => null,
        'address_2' => null,
        'city' => null,
        'state' => null,
        'zip_code' => null,
        'country' => null,
        'currency' => null,
        'phone' => null,
        'extra' => null,
        'sales_tax_number' => null,
        'sales_tax_name' => null,
        'sales_tax_percent' => 'decimal',
        'consolidated_billing' => null,
        'subscriptions' => 'uri',
        'payment_methods' => 'uri',
        'transactions' => 'uri',
        'meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'customer_reference' => 'customer_reference',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'company' => 'company',
        'email' => 'email',
        'address_1' => 'address_1',
        'address_2' => 'address_2',
        'city' => 'city',
        'state' => 'state',
        'zip_code' => 'zip_code',
        'country' => 'country',
        'currency' => 'currency',
        'phone' => 'phone',
        'extra' => 'extra',
        'sales_tax_number' => 'sales_tax_number',
        'sales_tax_name' => 'sales_tax_name',
        'sales_tax_percent' => 'sales_tax_percent',
        'consolidated_billing' => 'consolidated_billing',
        'subscriptions' => 'subscriptions',
        'payment_methods' => 'payment_methods',
        'transactions' => 'transactions',
        'meta' => 'meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'customer_reference' => 'setCustomerReference',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'address_1' => 'setAddress1',
        'address_2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip_code' => 'setZipCode',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'phone' => 'setPhone',
        'extra' => 'setExtra',
        'sales_tax_number' => 'setSalesTaxNumber',
        'sales_tax_name' => 'setSalesTaxName',
        'sales_tax_percent' => 'setSalesTaxPercent',
        'consolidated_billing' => 'setConsolidatedBilling',
        'subscriptions' => 'setSubscriptions',
        'payment_methods' => 'setPaymentMethods',
        'transactions' => 'setTransactions',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'customer_reference' => 'getCustomerReference',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'address_1' => 'getAddress1',
        'address_2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip_code' => 'getZipCode',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'phone' => 'getPhone',
        'extra' => 'getExtra',
        'sales_tax_number' => 'getSalesTaxNumber',
        'sales_tax_name' => 'getSalesTaxName',
        'sales_tax_percent' => 'getSalesTaxPercent',
        'consolidated_billing' => 'getConsolidatedBilling',
        'subscriptions' => 'getSubscriptions',
        'payment_methods' => 'getPaymentMethods',
        'transactions' => 'getTransactions',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COUNTRY_AD = 'AD';
    const COUNTRY_AE = 'AE';
    const COUNTRY_AF = 'AF';
    const COUNTRY_AG = 'AG';
    const COUNTRY_AI = 'AI';
    const COUNTRY_AL = 'AL';
    const COUNTRY_AM = 'AM';
    const COUNTRY_AO = 'AO';
    const COUNTRY_AQ = 'AQ';
    const COUNTRY_AR = 'AR';
    const COUNTRY__AS = 'AS';
    const COUNTRY_AT = 'AT';
    const COUNTRY_AU = 'AU';
    const COUNTRY_AW = 'AW';
    const COUNTRY_AX = 'AX';
    const COUNTRY_AZ = 'AZ';
    const COUNTRY_BA = 'BA';
    const COUNTRY_BB = 'BB';
    const COUNTRY_BD = 'BD';
    const COUNTRY_BE = 'BE';
    const COUNTRY_BF = 'BF';
    const COUNTRY_BG = 'BG';
    const COUNTRY_BH = 'BH';
    const COUNTRY_BI = 'BI';
    const COUNTRY_BJ = 'BJ';
    const COUNTRY_BL = 'BL';
    const COUNTRY_BM = 'BM';
    const COUNTRY_BN = 'BN';
    const COUNTRY_BO = 'BO';
    const COUNTRY_BQ = 'BQ';
    const COUNTRY_BR = 'BR';
    const COUNTRY_BS = 'BS';
    const COUNTRY_BT = 'BT';
    const COUNTRY_BV = 'BV';
    const COUNTRY_BW = 'BW';
    const COUNTRY_BY = 'BY';
    const COUNTRY_BZ = 'BZ';
    const COUNTRY_CA = 'CA';
    const COUNTRY_CC = 'CC';
    const COUNTRY_CD = 'CD';
    const COUNTRY_CF = 'CF';
    const COUNTRY_CG = 'CG';
    const COUNTRY_CH = 'CH';
    const COUNTRY_CI = 'CI';
    const COUNTRY_CK = 'CK';
    const COUNTRY_CL = 'CL';
    const COUNTRY_CM = 'CM';
    const COUNTRY_CN = 'CN';
    const COUNTRY_CO = 'CO';
    const COUNTRY_CR = 'CR';
    const COUNTRY_CU = 'CU';
    const COUNTRY_CV = 'CV';
    const COUNTRY_CW = 'CW';
    const COUNTRY_CX = 'CX';
    const COUNTRY_CY = 'CY';
    const COUNTRY_CZ = 'CZ';
    const COUNTRY_DE = 'DE';
    const COUNTRY_DJ = 'DJ';
    const COUNTRY_DK = 'DK';
    const COUNTRY_DM = 'DM';
    const COUNTRY__DO = 'DO';
    const COUNTRY_DZ = 'DZ';
    const COUNTRY_EC = 'EC';
    const COUNTRY_EE = 'EE';
    const COUNTRY_EG = 'EG';
    const COUNTRY_EH = 'EH';
    const COUNTRY_ER = 'ER';
    const COUNTRY_ES = 'ES';
    const COUNTRY_ET = 'ET';
    const COUNTRY_FI = 'FI';
    const COUNTRY_FJ = 'FJ';
    const COUNTRY_FK = 'FK';
    const COUNTRY_FM = 'FM';
    const COUNTRY_FO = 'FO';
    const COUNTRY_FR = 'FR';
    const COUNTRY_GA = 'GA';
    const COUNTRY_GB = 'GB';
    const COUNTRY_GD = 'GD';
    const COUNTRY_GE = 'GE';
    const COUNTRY_GF = 'GF';
    const COUNTRY_GG = 'GG';
    const COUNTRY_GH = 'GH';
    const COUNTRY_GI = 'GI';
    const COUNTRY_GL = 'GL';
    const COUNTRY_GM = 'GM';
    const COUNTRY_GN = 'GN';
    const COUNTRY_GP = 'GP';
    const COUNTRY_GQ = 'GQ';
    const COUNTRY_GR = 'GR';
    const COUNTRY_GS = 'GS';
    const COUNTRY_GT = 'GT';
    const COUNTRY_GU = 'GU';
    const COUNTRY_GW = 'GW';
    const COUNTRY_GY = 'GY';
    const COUNTRY_HK = 'HK';
    const COUNTRY_HM = 'HM';
    const COUNTRY_HN = 'HN';
    const COUNTRY_HR = 'HR';
    const COUNTRY_HT = 'HT';
    const COUNTRY_HU = 'HU';
    const COUNTRY_ID = 'ID';
    const COUNTRY_IE = 'IE';
    const COUNTRY_IL = 'IL';
    const COUNTRY_IM = 'IM';
    const COUNTRY_IN = 'IN';
    const COUNTRY_IO = 'IO';
    const COUNTRY_IQ = 'IQ';
    const COUNTRY_IR = 'IR';
    const COUNTRY_IS = 'IS';
    const COUNTRY_IT = 'IT';
    const COUNTRY_JE = 'JE';
    const COUNTRY_JM = 'JM';
    const COUNTRY_JO = 'JO';
    const COUNTRY_JP = 'JP';
    const COUNTRY_KE = 'KE';
    const COUNTRY_KG = 'KG';
    const COUNTRY_KH = 'KH';
    const COUNTRY_KI = 'KI';
    const COUNTRY_KM = 'KM';
    const COUNTRY_KN = 'KN';
    const COUNTRY_KP = 'KP';
    const COUNTRY_KR = 'KR';
    const COUNTRY_KW = 'KW';
    const COUNTRY_KY = 'KY';
    const COUNTRY_KZ = 'KZ';
    const COUNTRY_LA = 'LA';
    const COUNTRY_LB = 'LB';
    const COUNTRY_LC = 'LC';
    const COUNTRY_LI = 'LI';
    const COUNTRY_LK = 'LK';
    const COUNTRY_LR = 'LR';
    const COUNTRY_LS = 'LS';
    const COUNTRY_LT = 'LT';
    const COUNTRY_LU = 'LU';
    const COUNTRY_LV = 'LV';
    const COUNTRY_LY = 'LY';
    const COUNTRY_MA = 'MA';
    const COUNTRY_MC = 'MC';
    const COUNTRY_MD = 'MD';
    const COUNTRY_ME = 'ME';
    const COUNTRY_MF = 'MF';
    const COUNTRY_MG = 'MG';
    const COUNTRY_MH = 'MH';
    const COUNTRY_MK = 'MK';
    const COUNTRY_ML = 'ML';
    const COUNTRY_MM = 'MM';
    const COUNTRY_MN = 'MN';
    const COUNTRY_MO = 'MO';
    const COUNTRY_MP = 'MP';
    const COUNTRY_MQ = 'MQ';
    const COUNTRY_MR = 'MR';
    const COUNTRY_MS = 'MS';
    const COUNTRY_MT = 'MT';
    const COUNTRY_MU = 'MU';
    const COUNTRY_MV = 'MV';
    const COUNTRY_MW = 'MW';
    const COUNTRY_MX = 'MX';
    const COUNTRY_MY = 'MY';
    const COUNTRY_MZ = 'MZ';
    const COUNTRY_NA = 'NA';
    const COUNTRY_NC = 'NC';
    const COUNTRY_NE = 'NE';
    const COUNTRY_NF = 'NF';
    const COUNTRY_NG = 'NG';
    const COUNTRY_NI = 'NI';
    const COUNTRY_NL = 'NL';
    const COUNTRY_NO = 'NO';
    const COUNTRY_NP = 'NP';
    const COUNTRY_NR = 'NR';
    const COUNTRY_NU = 'NU';
    const COUNTRY_NZ = 'NZ';
    const COUNTRY_OM = 'OM';
    const COUNTRY_PA = 'PA';
    const COUNTRY_PE = 'PE';
    const COUNTRY_PF = 'PF';
    const COUNTRY_PG = 'PG';
    const COUNTRY_PH = 'PH';
    const COUNTRY_PK = 'PK';
    const COUNTRY_PL = 'PL';
    const COUNTRY_PM = 'PM';
    const COUNTRY_PN = 'PN';
    const COUNTRY_PR = 'PR';
    const COUNTRY_PS = 'PS';
    const COUNTRY_PT = 'PT';
    const COUNTRY_PW = 'PW';
    const COUNTRY_PY = 'PY';
    const COUNTRY_QA = 'QA';
    const COUNTRY_RE = 'RE';
    const COUNTRY_RO = 'RO';
    const COUNTRY_RS = 'RS';
    const COUNTRY_RU = 'RU';
    const COUNTRY_RW = 'RW';
    const COUNTRY_SA = 'SA';
    const COUNTRY_SB = 'SB';
    const COUNTRY_SC = 'SC';
    const COUNTRY_SD = 'SD';
    const COUNTRY_SE = 'SE';
    const COUNTRY_SG = 'SG';
    const COUNTRY_SH = 'SH';
    const COUNTRY_SI = 'SI';
    const COUNTRY_SJ = 'SJ';
    const COUNTRY_SK = 'SK';
    const COUNTRY_SL = 'SL';
    const COUNTRY_SM = 'SM';
    const COUNTRY_SN = 'SN';
    const COUNTRY_SO = 'SO';
    const COUNTRY_SR = 'SR';
    const COUNTRY_SS = 'SS';
    const COUNTRY_ST = 'ST';
    const COUNTRY_SV = 'SV';
    const COUNTRY_SX = 'SX';
    const COUNTRY_SY = 'SY';
    const COUNTRY_SZ = 'SZ';
    const COUNTRY_TC = 'TC';
    const COUNTRY_TD = 'TD';
    const COUNTRY_TF = 'TF';
    const COUNTRY_TG = 'TG';
    const COUNTRY_TH = 'TH';
    const COUNTRY_TJ = 'TJ';
    const COUNTRY_TK = 'TK';
    const COUNTRY_TL = 'TL';
    const COUNTRY_TM = 'TM';
    const COUNTRY_TN = 'TN';
    const COUNTRY_TO = 'TO';
    const COUNTRY_TR = 'TR';
    const COUNTRY_TT = 'TT';
    const COUNTRY_TV = 'TV';
    const COUNTRY_TW = 'TW';
    const COUNTRY_TZ = 'TZ';
    const COUNTRY_UA = 'UA';
    const COUNTRY_UG = 'UG';
    const COUNTRY_UM = 'UM';
    const COUNTRY_US = 'US';
    const COUNTRY_UY = 'UY';
    const COUNTRY_UZ = 'UZ';
    const COUNTRY_VA = 'VA';
    const COUNTRY_VC = 'VC';
    const COUNTRY_VE = 'VE';
    const COUNTRY_VG = 'VG';
    const COUNTRY_VI = 'VI';
    const COUNTRY_VN = 'VN';
    const COUNTRY_VU = 'VU';
    const COUNTRY_WF = 'WF';
    const COUNTRY_WS = 'WS';
    const COUNTRY_YE = 'YE';
    const COUNTRY_YT = 'YT';
    const COUNTRY_ZA = 'ZA';
    const COUNTRY_ZM = 'ZM';
    const COUNTRY_ZW = 'ZW';
    const CURRENCY_AED = 'AED';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ANG = 'ANG';
    const CURRENCY_AOA = 'AOA';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_AWG = 'AWG';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_BBD = 'BBD';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_BIF = 'BIF';
    const CURRENCY_BMD = 'BMD';
    const CURRENCY_BND = 'BND';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_BSD = 'BSD';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY_BYN = 'BYN';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUC = 'CUC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_CVE = 'CVE';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_FJD = 'FJD';
    const CURRENCY_FKP = 'FKP';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_GHS = 'GHS';
    const CURRENCY_GIP = 'GIP';
    const CURRENCY_GMD = 'GMD';
    const CURRENCY_GNF = 'GNF';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_GYD = 'GYD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_INR = 'INR';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_KES = 'KES';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KMF = 'KMF';
    const CURRENCY_KPW = 'KPW';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_KYD = 'KYD';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_LRD = 'LRD';
    const CURRENCY_LSL = 'LSL';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_MGA = 'MGA';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_MRO = 'MRO';
    const CURRENCY_MUR = 'MUR';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_MWK = 'MWK';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_MZN = 'MZN';
    const CURRENCY_NAD = 'NAD';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PGK = 'PGK';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SBD = 'SBD';
    const CURRENCY_SCR = 'SCR';
    const CURRENCY_SDG = 'SDG';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_SHP = 'SHP';
    const CURRENCY_SLL = 'SLL';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_SSP = 'SSP';
    const CURRENCY_STD = 'STD';
    const CURRENCY_SVC = 'SVC';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_SZL = 'SZL';
    const CURRENCY_THB = 'THB';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_TND = 'TND';
    const CURRENCY_TOP = 'TOP';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_TZS = 'TZS';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UGX = 'UGX';
    const CURRENCY_USD = 'USD';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_VND = 'VND';
    const CURRENCY_VUV = 'VUV';
    const CURRENCY_WST = 'WST';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_XAG = 'XAG';
    const CURRENCY_XAU = 'XAU';
    const CURRENCY_XBA = 'XBA';
    const CURRENCY_XBB = 'XBB';
    const CURRENCY_XBC = 'XBC';
    const CURRENCY_XBD = 'XBD';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_XPD = 'XPD';
    const CURRENCY_XPF = 'XPF';
    const CURRENCY_XPT = 'XPT';
    const CURRENCY_XSU = 'XSU';
    const CURRENCY_XTS = 'XTS';
    const CURRENCY_XUA = 'XUA';
    const CURRENCY_XXX = 'XXX';
    const CURRENCY_YER = 'YER';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ZMW = 'ZMW';
    const CURRENCY_ZWL = 'ZWL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_AD,
            self::COUNTRY_AE,
            self::COUNTRY_AF,
            self::COUNTRY_AG,
            self::COUNTRY_AI,
            self::COUNTRY_AL,
            self::COUNTRY_AM,
            self::COUNTRY_AO,
            self::COUNTRY_AQ,
            self::COUNTRY_AR,
            self::COUNTRY__AS,
            self::COUNTRY_AT,
            self::COUNTRY_AU,
            self::COUNTRY_AW,
            self::COUNTRY_AX,
            self::COUNTRY_AZ,
            self::COUNTRY_BA,
            self::COUNTRY_BB,
            self::COUNTRY_BD,
            self::COUNTRY_BE,
            self::COUNTRY_BF,
            self::COUNTRY_BG,
            self::COUNTRY_BH,
            self::COUNTRY_BI,
            self::COUNTRY_BJ,
            self::COUNTRY_BL,
            self::COUNTRY_BM,
            self::COUNTRY_BN,
            self::COUNTRY_BO,
            self::COUNTRY_BQ,
            self::COUNTRY_BR,
            self::COUNTRY_BS,
            self::COUNTRY_BT,
            self::COUNTRY_BV,
            self::COUNTRY_BW,
            self::COUNTRY_BY,
            self::COUNTRY_BZ,
            self::COUNTRY_CA,
            self::COUNTRY_CC,
            self::COUNTRY_CD,
            self::COUNTRY_CF,
            self::COUNTRY_CG,
            self::COUNTRY_CH,
            self::COUNTRY_CI,
            self::COUNTRY_CK,
            self::COUNTRY_CL,
            self::COUNTRY_CM,
            self::COUNTRY_CN,
            self::COUNTRY_CO,
            self::COUNTRY_CR,
            self::COUNTRY_CU,
            self::COUNTRY_CV,
            self::COUNTRY_CW,
            self::COUNTRY_CX,
            self::COUNTRY_CY,
            self::COUNTRY_CZ,
            self::COUNTRY_DE,
            self::COUNTRY_DJ,
            self::COUNTRY_DK,
            self::COUNTRY_DM,
            self::COUNTRY__DO,
            self::COUNTRY_DZ,
            self::COUNTRY_EC,
            self::COUNTRY_EE,
            self::COUNTRY_EG,
            self::COUNTRY_EH,
            self::COUNTRY_ER,
            self::COUNTRY_ES,
            self::COUNTRY_ET,
            self::COUNTRY_FI,
            self::COUNTRY_FJ,
            self::COUNTRY_FK,
            self::COUNTRY_FM,
            self::COUNTRY_FO,
            self::COUNTRY_FR,
            self::COUNTRY_GA,
            self::COUNTRY_GB,
            self::COUNTRY_GD,
            self::COUNTRY_GE,
            self::COUNTRY_GF,
            self::COUNTRY_GG,
            self::COUNTRY_GH,
            self::COUNTRY_GI,
            self::COUNTRY_GL,
            self::COUNTRY_GM,
            self::COUNTRY_GN,
            self::COUNTRY_GP,
            self::COUNTRY_GQ,
            self::COUNTRY_GR,
            self::COUNTRY_GS,
            self::COUNTRY_GT,
            self::COUNTRY_GU,
            self::COUNTRY_GW,
            self::COUNTRY_GY,
            self::COUNTRY_HK,
            self::COUNTRY_HM,
            self::COUNTRY_HN,
            self::COUNTRY_HR,
            self::COUNTRY_HT,
            self::COUNTRY_HU,
            self::COUNTRY_ID,
            self::COUNTRY_IE,
            self::COUNTRY_IL,
            self::COUNTRY_IM,
            self::COUNTRY_IN,
            self::COUNTRY_IO,
            self::COUNTRY_IQ,
            self::COUNTRY_IR,
            self::COUNTRY_IS,
            self::COUNTRY_IT,
            self::COUNTRY_JE,
            self::COUNTRY_JM,
            self::COUNTRY_JO,
            self::COUNTRY_JP,
            self::COUNTRY_KE,
            self::COUNTRY_KG,
            self::COUNTRY_KH,
            self::COUNTRY_KI,
            self::COUNTRY_KM,
            self::COUNTRY_KN,
            self::COUNTRY_KP,
            self::COUNTRY_KR,
            self::COUNTRY_KW,
            self::COUNTRY_KY,
            self::COUNTRY_KZ,
            self::COUNTRY_LA,
            self::COUNTRY_LB,
            self::COUNTRY_LC,
            self::COUNTRY_LI,
            self::COUNTRY_LK,
            self::COUNTRY_LR,
            self::COUNTRY_LS,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_LV,
            self::COUNTRY_LY,
            self::COUNTRY_MA,
            self::COUNTRY_MC,
            self::COUNTRY_MD,
            self::COUNTRY_ME,
            self::COUNTRY_MF,
            self::COUNTRY_MG,
            self::COUNTRY_MH,
            self::COUNTRY_MK,
            self::COUNTRY_ML,
            self::COUNTRY_MM,
            self::COUNTRY_MN,
            self::COUNTRY_MO,
            self::COUNTRY_MP,
            self::COUNTRY_MQ,
            self::COUNTRY_MR,
            self::COUNTRY_MS,
            self::COUNTRY_MT,
            self::COUNTRY_MU,
            self::COUNTRY_MV,
            self::COUNTRY_MW,
            self::COUNTRY_MX,
            self::COUNTRY_MY,
            self::COUNTRY_MZ,
            self::COUNTRY_NA,
            self::COUNTRY_NC,
            self::COUNTRY_NE,
            self::COUNTRY_NF,
            self::COUNTRY_NG,
            self::COUNTRY_NI,
            self::COUNTRY_NL,
            self::COUNTRY_NO,
            self::COUNTRY_NP,
            self::COUNTRY_NR,
            self::COUNTRY_NU,
            self::COUNTRY_NZ,
            self::COUNTRY_OM,
            self::COUNTRY_PA,
            self::COUNTRY_PE,
            self::COUNTRY_PF,
            self::COUNTRY_PG,
            self::COUNTRY_PH,
            self::COUNTRY_PK,
            self::COUNTRY_PL,
            self::COUNTRY_PM,
            self::COUNTRY_PN,
            self::COUNTRY_PR,
            self::COUNTRY_PS,
            self::COUNTRY_PT,
            self::COUNTRY_PW,
            self::COUNTRY_PY,
            self::COUNTRY_QA,
            self::COUNTRY_RE,
            self::COUNTRY_RO,
            self::COUNTRY_RS,
            self::COUNTRY_RU,
            self::COUNTRY_RW,
            self::COUNTRY_SA,
            self::COUNTRY_SB,
            self::COUNTRY_SC,
            self::COUNTRY_SD,
            self::COUNTRY_SE,
            self::COUNTRY_SG,
            self::COUNTRY_SH,
            self::COUNTRY_SI,
            self::COUNTRY_SJ,
            self::COUNTRY_SK,
            self::COUNTRY_SL,
            self::COUNTRY_SM,
            self::COUNTRY_SN,
            self::COUNTRY_SO,
            self::COUNTRY_SR,
            self::COUNTRY_SS,
            self::COUNTRY_ST,
            self::COUNTRY_SV,
            self::COUNTRY_SX,
            self::COUNTRY_SY,
            self::COUNTRY_SZ,
            self::COUNTRY_TC,
            self::COUNTRY_TD,
            self::COUNTRY_TF,
            self::COUNTRY_TG,
            self::COUNTRY_TH,
            self::COUNTRY_TJ,
            self::COUNTRY_TK,
            self::COUNTRY_TL,
            self::COUNTRY_TM,
            self::COUNTRY_TN,
            self::COUNTRY_TO,
            self::COUNTRY_TR,
            self::COUNTRY_TT,
            self::COUNTRY_TV,
            self::COUNTRY_TW,
            self::COUNTRY_TZ,
            self::COUNTRY_UA,
            self::COUNTRY_UG,
            self::COUNTRY_UM,
            self::COUNTRY_US,
            self::COUNTRY_UY,
            self::COUNTRY_UZ,
            self::COUNTRY_VA,
            self::COUNTRY_VC,
            self::COUNTRY_VE,
            self::COUNTRY_VG,
            self::COUNTRY_VI,
            self::COUNTRY_VN,
            self::COUNTRY_VU,
            self::COUNTRY_WF,
            self::COUNTRY_WS,
            self::COUNTRY_YE,
            self::COUNTRY_YT,
            self::COUNTRY_ZA,
            self::COUNTRY_ZM,
            self::COUNTRY_ZW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_AED,
            self::CURRENCY_AFN,
            self::CURRENCY_ALL,
            self::CURRENCY_AMD,
            self::CURRENCY_ANG,
            self::CURRENCY_AOA,
            self::CURRENCY_ARS,
            self::CURRENCY_AUD,
            self::CURRENCY_AWG,
            self::CURRENCY_AZN,
            self::CURRENCY_BAM,
            self::CURRENCY_BBD,
            self::CURRENCY_BDT,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BIF,
            self::CURRENCY_BMD,
            self::CURRENCY_BND,
            self::CURRENCY_BOB,
            self::CURRENCY_BRL,
            self::CURRENCY_BSD,
            self::CURRENCY_BTN,
            self::CURRENCY_BWP,
            self::CURRENCY_BYN,
            self::CURRENCY_BZD,
            self::CURRENCY_CAD,
            self::CURRENCY_CDF,
            self::CURRENCY_CHF,
            self::CURRENCY_CLP,
            self::CURRENCY_CNY,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUC,
            self::CURRENCY_CUP,
            self::CURRENCY_CVE,
            self::CURRENCY_CZK,
            self::CURRENCY_DJF,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_ERN,
            self::CURRENCY_ETB,
            self::CURRENCY_EUR,
            self::CURRENCY_FJD,
            self::CURRENCY_FKP,
            self::CURRENCY_GBP,
            self::CURRENCY_GEL,
            self::CURRENCY_GHS,
            self::CURRENCY_GIP,
            self::CURRENCY_GMD,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HKD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HTG,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_INR,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_ISK,
            self::CURRENCY_JMD,
            self::CURRENCY_JOD,
            self::CURRENCY_JPY,
            self::CURRENCY_KES,
            self::CURRENCY_KGS,
            self::CURRENCY_KHR,
            self::CURRENCY_KMF,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KYD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LKR,
            self::CURRENCY_LRD,
            self::CURRENCY_LSL,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_MDL,
            self::CURRENCY_MGA,
            self::CURRENCY_MKD,
            self::CURRENCY_MMK,
            self::CURRENCY_MNT,
            self::CURRENCY_MOP,
            self::CURRENCY_MRO,
            self::CURRENCY_MUR,
            self::CURRENCY_MVR,
            self::CURRENCY_MWK,
            self::CURRENCY_MXN,
            self::CURRENCY_MYR,
            self::CURRENCY_MZN,
            self::CURRENCY_NAD,
            self::CURRENCY_NGN,
            self::CURRENCY_NIO,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_NZD,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PGK,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RSD,
            self::CURRENCY_RUB,
            self::CURRENCY_RWF,
            self::CURRENCY_SAR,
            self::CURRENCY_SBD,
            self::CURRENCY_SCR,
            self::CURRENCY_SDG,
            self::CURRENCY_SEK,
            self::CURRENCY_SGD,
            self::CURRENCY_SHP,
            self::CURRENCY_SLL,
            self::CURRENCY_SOS,
            self::CURRENCY_SRD,
            self::CURRENCY_SSP,
            self::CURRENCY_STD,
            self::CURRENCY_SVC,
            self::CURRENCY_SYP,
            self::CURRENCY_SZL,
            self::CURRENCY_THB,
            self::CURRENCY_TJS,
            self::CURRENCY_TMT,
            self::CURRENCY_TND,
            self::CURRENCY_TOP,
            self::CURRENCY__TRY,
            self::CURRENCY_TTD,
            self::CURRENCY_TWD,
            self::CURRENCY_TZS,
            self::CURRENCY_UAH,
            self::CURRENCY_UGX,
            self::CURRENCY_USD,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_VEF,
            self::CURRENCY_VND,
            self::CURRENCY_VUV,
            self::CURRENCY_WST,
            self::CURRENCY_XAF,
            self::CURRENCY_XAG,
            self::CURRENCY_XAU,
            self::CURRENCY_XBA,
            self::CURRENCY_XBB,
            self::CURRENCY_XBC,
            self::CURRENCY_XBD,
            self::CURRENCY_XCD,
            self::CURRENCY_XDR,
            self::CURRENCY_XOF,
            self::CURRENCY_XPD,
            self::CURRENCY_XPF,
            self::CURRENCY_XPT,
            self::CURRENCY_XSU,
            self::CURRENCY_XTS,
            self::CURRENCY_XUA,
            self::CURRENCY_XXX,
            self::CURRENCY_YER,
            self::CURRENCY_ZAR,
            self::CURRENCY_ZMW,
            self::CURRENCY_ZWL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address_1'] = isset($data['address_1']) ? $data['address_1'] : null;
        $this->container['address_2'] = isset($data['address_2']) ? $data['address_2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['sales_tax_number'] = isset($data['sales_tax_number']) ? $data['sales_tax_number'] : null;
        $this->container['sales_tax_name'] = isset($data['sales_tax_name']) ? $data['sales_tax_name'] : null;
        $this->container['sales_tax_percent'] = isset($data['sales_tax_percent']) ? $data['sales_tax_percent'] : null;
        $this->container['consolidated_billing'] = isset($data['consolidated_billing']) ? $data['consolidated_billing'] : null;
        $this->container['subscriptions'] = isset($data['subscriptions']) ? $data['subscriptions'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customer_reference']) && (mb_strlen($this->container['customer_reference']) > 256)) {
            $invalidProperties[] = "invalid value for 'customer_reference', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['customer_reference']) && !preg_match("/^[^,]*$/", $this->container['customer_reference'])) {
            $invalidProperties[] = "invalid value for 'customer_reference', must be conform to the pattern /^[^,]*$/.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 128)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if ($this->container['address_1'] === null) {
            $invalidProperties[] = "'address_1' can't be null";
        }
        if ((mb_strlen($this->container['address_1']) > 128)) {
            $invalidProperties[] = "invalid value for 'address_1', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['address_1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address_1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address_2']) && (mb_strlen($this->container['address_2']) > 128)) {
            $invalidProperties[] = "invalid value for 'address_2', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 128)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 128)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 32)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 32)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['sales_tax_number']) && (mb_strlen($this->container['sales_tax_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'sales_tax_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['sales_tax_name']) && (mb_strlen($this->container['sales_tax_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'sales_tax_name', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string $customer_reference It's a reference to be passed between silver and clients. It usually points to an account ID.
     *
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        if (!is_null($customer_reference) && (mb_strlen($customer_reference) > 256)) {
            throw new \InvalidArgumentException('invalid length for $customer_reference when calling Customer., must be smaller than or equal to 256.');
        }
        if (!is_null($customer_reference) && (!preg_match("/^[^,]*$/", $customer_reference))) {
            throw new \InvalidArgumentException("invalid value for $customer_reference when calling Customer., must conform to the pattern /^[^,]*$/.");
        }

        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The customer's first name.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Customer., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Customer., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The customer's last name.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Customer., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Customer., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company The company to which the bill is issued.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        if (!is_null($company) && (mb_strlen($company) > 128)) {
            throw new \InvalidArgumentException('invalid length for $company when calling Customer., must be smaller than or equal to 128.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Customer., must be smaller than or equal to 254.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address_1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address_1'];
    }

    /**
     * Sets address_1
     *
     * @param string $address_1 address_1
     *
     * @return $this
     */
    public function setAddress1($address_1)
    {
        if ((mb_strlen($address_1) > 128)) {
            throw new \InvalidArgumentException('invalid length for $address_1 when calling Customer., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($address_1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address_1 when calling Customer., must be bigger than or equal to 1.');
        }

        $this->container['address_1'] = $address_1;

        return $this;
    }

    /**
     * Gets address_2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address_2'];
    }

    /**
     * Sets address_2
     *
     * @param string $address_2 address_2
     *
     * @return $this
     */
    public function setAddress2($address_2)
    {
        if (!is_null($address_2) && (mb_strlen($address_2) > 128)) {
            throw new \InvalidArgumentException('invalid length for $address_2 when calling Customer., must be smaller than or equal to 128.');
        }

        $this->container['address_2'] = $address_2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 128)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Customer., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Customer., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 128)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Customer., must be smaller than or equal to 128.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 32)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling Customer., must be smaller than or equal to 32.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $allowedValues = $this->getCountryAllowableValues();
        if (!in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Used to enforce a certain currency when making transactionsfor the customer.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 32)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Customer., must be smaller than or equal to 32.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string $extra Extra information to display on the invoice (markdown formatted).
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets sales_tax_number
     *
     * @return string
     */
    public function getSalesTaxNumber()
    {
        return $this->container['sales_tax_number'];
    }

    /**
     * Sets sales_tax_number
     *
     * @param string $sales_tax_number sales_tax_number
     *
     * @return $this
     */
    public function setSalesTaxNumber($sales_tax_number)
    {
        if (!is_null($sales_tax_number) && (mb_strlen($sales_tax_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $sales_tax_number when calling Customer., must be smaller than or equal to 64.');
        }

        $this->container['sales_tax_number'] = $sales_tax_number;

        return $this;
    }

    /**
     * Gets sales_tax_name
     *
     * @return string
     */
    public function getSalesTaxName()
    {
        return $this->container['sales_tax_name'];
    }

    /**
     * Sets sales_tax_name
     *
     * @param string $sales_tax_name Sales tax name (eg. 'sales tax' or 'VAT').
     *
     * @return $this
     */
    public function setSalesTaxName($sales_tax_name)
    {
        if (!is_null($sales_tax_name) && (mb_strlen($sales_tax_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $sales_tax_name when calling Customer., must be smaller than or equal to 64.');
        }

        $this->container['sales_tax_name'] = $sales_tax_name;

        return $this;
    }

    /**
     * Gets sales_tax_percent
     *
     * @return string
     */
    public function getSalesTaxPercent()
    {
        return $this->container['sales_tax_percent'];
    }

    /**
     * Sets sales_tax_percent
     *
     * @param string $sales_tax_percent Whenever to add sales tax. If null, it won't show up on the invoice.
     *
     * @return $this
     */
    public function setSalesTaxPercent($sales_tax_percent)
    {
        $this->container['sales_tax_percent'] = $sales_tax_percent;

        return $this;
    }

    /**
     * Gets consolidated_billing
     *
     * @return bool
     */
    public function getConsolidatedBilling()
    {
        return $this->container['consolidated_billing'];
    }

    /**
     * Sets consolidated_billing
     *
     * @param bool $consolidated_billing A flag indicating consolidated billing.
     *
     * @return $this
     */
    public function setConsolidatedBilling($consolidated_billing)
    {
        $this->container['consolidated_billing'] = $consolidated_billing;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return string[]
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param string[] $subscriptions subscriptions
     *
     * @return $this
     */
    public function setSubscriptions($subscriptions)
    {
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string $payment_methods payment_methods
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return string
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param string $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


