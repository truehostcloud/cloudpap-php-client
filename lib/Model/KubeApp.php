<?php
/**
 * KubeApp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.33
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * KubeApp Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KubeApp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KubeApp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'icon' => 'string',
        'helm_repo_url' => 'string',
        'helm_repo_name' => 'string',
        'helm_package_name' => 'string',
        'enabled' => 'bool',
        'cluster' => 'int',
        'templates' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'icon' => 'uri',
        'helm_repo_url' => 'uri',
        'helm_repo_name' => null,
        'helm_package_name' => null,
        'enabled' => null,
        'cluster' => null,
        'templates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'icon' => 'icon',
        'helm_repo_url' => 'helm_repo_url',
        'helm_repo_name' => 'helm_repo_name',
        'helm_package_name' => 'helm_package_name',
        'enabled' => 'enabled',
        'cluster' => 'cluster',
        'templates' => 'templates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'icon' => 'setIcon',
        'helm_repo_url' => 'setHelmRepoUrl',
        'helm_repo_name' => 'setHelmRepoName',
        'helm_package_name' => 'setHelmPackageName',
        'enabled' => 'setEnabled',
        'cluster' => 'setCluster',
        'templates' => 'setTemplates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'icon' => 'getIcon',
        'helm_repo_url' => 'getHelmRepoUrl',
        'helm_repo_name' => 'getHelmRepoName',
        'helm_package_name' => 'getHelmPackageName',
        'enabled' => 'getEnabled',
        'cluster' => 'getCluster',
        'templates' => 'getTemplates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['helm_repo_url'] = isset($data['helm_repo_url']) ? $data['helm_repo_url'] : null;
        $this->container['helm_repo_name'] = isset($data['helm_repo_name']) ? $data['helm_repo_name'] : null;
        $this->container['helm_package_name'] = isset($data['helm_package_name']) ? $data['helm_package_name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['cluster'] = isset($data['cluster']) ? $data['cluster'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['helm_repo_url'] === null) {
            $invalidProperties[] = "'helm_repo_url' can't be null";
        }
        if ((mb_strlen($this->container['helm_repo_url']) > 200)) {
            $invalidProperties[] = "invalid value for 'helm_repo_url', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['helm_repo_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'helm_repo_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['helm_repo_name'] === null) {
            $invalidProperties[] = "'helm_repo_name' can't be null";
        }
        if ((mb_strlen($this->container['helm_repo_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'helm_repo_name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['helm_repo_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'helm_repo_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['helm_package_name'] === null) {
            $invalidProperties[] = "'helm_package_name' can't be null";
        }
        if ((mb_strlen($this->container['helm_package_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'helm_package_name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['helm_package_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'helm_package_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling KubeApp., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling KubeApp., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {

        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling KubeApp., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets helm_repo_url
     *
     * @return string
     */
    public function getHelmRepoUrl()
    {
        return $this->container['helm_repo_url'];
    }

    /**
     * Sets helm_repo_url
     *
     * @param string $helm_repo_url helm_repo_url
     *
     * @return $this
     */
    public function setHelmRepoUrl($helm_repo_url)
    {
        if ((mb_strlen($helm_repo_url) > 200)) {
            throw new \InvalidArgumentException('invalid length for $helm_repo_url when calling KubeApp., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($helm_repo_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $helm_repo_url when calling KubeApp., must be bigger than or equal to 1.');
        }

        $this->container['helm_repo_url'] = $helm_repo_url;

        return $this;
    }

    /**
     * Gets helm_repo_name
     *
     * @return string
     */
    public function getHelmRepoName()
    {
        return $this->container['helm_repo_name'];
    }

    /**
     * Sets helm_repo_name
     *
     * @param string $helm_repo_name helm_repo_name
     *
     * @return $this
     */
    public function setHelmRepoName($helm_repo_name)
    {
        if ((mb_strlen($helm_repo_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $helm_repo_name when calling KubeApp., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($helm_repo_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $helm_repo_name when calling KubeApp., must be bigger than or equal to 1.');
        }

        $this->container['helm_repo_name'] = $helm_repo_name;

        return $this;
    }

    /**
     * Gets helm_package_name
     *
     * @return string
     */
    public function getHelmPackageName()
    {
        return $this->container['helm_package_name'];
    }

    /**
     * Sets helm_package_name
     *
     * @param string $helm_package_name helm_package_name
     *
     * @return $this
     */
    public function setHelmPackageName($helm_package_name)
    {
        if ((mb_strlen($helm_package_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $helm_package_name when calling KubeApp., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($helm_package_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $helm_package_name when calling KubeApp., must be bigger than or equal to 1.');
        }

        $this->container['helm_package_name'] = $helm_package_name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets cluster
     *
     * @return int
     */
    public function getCluster()
    {
        return $this->container['cluster'];
    }

    /**
     * Sets cluster
     *
     * @param int $cluster cluster
     *
     * @return $this
     */
    public function setCluster($cluster)
    {
        $this->container['cluster'] = $cluster;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return int[]
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param int[] $templates templates
     *
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


