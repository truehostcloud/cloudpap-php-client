<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.33
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'series' => 'string',
        'number' => 'int',
        'provider' => 'string',
        'customer' => 'string',
        'archived_provider' => 'object',
        'archived_customer' => 'object',
        'due_date' => '\DateTime',
        'issue_date' => '\DateTime',
        'paid_date' => '\DateTime',
        'cancel_date' => '\DateTime',
        'sales_tax_name' => 'string',
        'sales_tax_percent' => 'string',
        'currency' => 'string',
        'transaction_currency' => 'string',
        'transaction_xe_rate' => 'string',
        'transaction_xe_date' => '\DateTime',
        'state' => 'string',
        'proforma' => 'string',
        'invoice_entries' => '\Swagger\Client\Model\DocumentEntry[]',
        'total' => 'string',
        'total_in_transaction_currency' => 'string',
        'pdf_url' => 'string',
        'transactions' => '\Swagger\Client\Model\Transaction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'series' => null,
        'number' => null,
        'provider' => 'uri',
        'customer' => 'uri',
        'archived_provider' => null,
        'archived_customer' => null,
        'due_date' => 'date',
        'issue_date' => 'date',
        'paid_date' => 'date',
        'cancel_date' => 'date',
        'sales_tax_name' => null,
        'sales_tax_percent' => 'decimal',
        'currency' => null,
        'transaction_currency' => null,
        'transaction_xe_rate' => 'decimal',
        'transaction_xe_date' => 'date',
        'state' => null,
        'proforma' => 'uri',
        'invoice_entries' => null,
        'total' => 'decimal',
        'total_in_transaction_currency' => 'decimal',
        'pdf_url' => 'uri',
        'transactions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'series' => 'series',
        'number' => 'number',
        'provider' => 'provider',
        'customer' => 'customer',
        'archived_provider' => 'archived_provider',
        'archived_customer' => 'archived_customer',
        'due_date' => 'due_date',
        'issue_date' => 'issue_date',
        'paid_date' => 'paid_date',
        'cancel_date' => 'cancel_date',
        'sales_tax_name' => 'sales_tax_name',
        'sales_tax_percent' => 'sales_tax_percent',
        'currency' => 'currency',
        'transaction_currency' => 'transaction_currency',
        'transaction_xe_rate' => 'transaction_xe_rate',
        'transaction_xe_date' => 'transaction_xe_date',
        'state' => 'state',
        'proforma' => 'proforma',
        'invoice_entries' => 'invoice_entries',
        'total' => 'total',
        'total_in_transaction_currency' => 'total_in_transaction_currency',
        'pdf_url' => 'pdf_url',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'series' => 'setSeries',
        'number' => 'setNumber',
        'provider' => 'setProvider',
        'customer' => 'setCustomer',
        'archived_provider' => 'setArchivedProvider',
        'archived_customer' => 'setArchivedCustomer',
        'due_date' => 'setDueDate',
        'issue_date' => 'setIssueDate',
        'paid_date' => 'setPaidDate',
        'cancel_date' => 'setCancelDate',
        'sales_tax_name' => 'setSalesTaxName',
        'sales_tax_percent' => 'setSalesTaxPercent',
        'currency' => 'setCurrency',
        'transaction_currency' => 'setTransactionCurrency',
        'transaction_xe_rate' => 'setTransactionXeRate',
        'transaction_xe_date' => 'setTransactionXeDate',
        'state' => 'setState',
        'proforma' => 'setProforma',
        'invoice_entries' => 'setInvoiceEntries',
        'total' => 'setTotal',
        'total_in_transaction_currency' => 'setTotalInTransactionCurrency',
        'pdf_url' => 'setPdfUrl',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'series' => 'getSeries',
        'number' => 'getNumber',
        'provider' => 'getProvider',
        'customer' => 'getCustomer',
        'archived_provider' => 'getArchivedProvider',
        'archived_customer' => 'getArchivedCustomer',
        'due_date' => 'getDueDate',
        'issue_date' => 'getIssueDate',
        'paid_date' => 'getPaidDate',
        'cancel_date' => 'getCancelDate',
        'sales_tax_name' => 'getSalesTaxName',
        'sales_tax_percent' => 'getSalesTaxPercent',
        'currency' => 'getCurrency',
        'transaction_currency' => 'getTransactionCurrency',
        'transaction_xe_rate' => 'getTransactionXeRate',
        'transaction_xe_date' => 'getTransactionXeDate',
        'state' => 'getState',
        'proforma' => 'getProforma',
        'invoice_entries' => 'getInvoiceEntries',
        'total' => 'getTotal',
        'total_in_transaction_currency' => 'getTotalInTransactionCurrency',
        'pdf_url' => 'getPdfUrl',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENCY_AED = 'AED';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ANG = 'ANG';
    const CURRENCY_AOA = 'AOA';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_AWG = 'AWG';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_BBD = 'BBD';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_BIF = 'BIF';
    const CURRENCY_BMD = 'BMD';
    const CURRENCY_BND = 'BND';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_BSD = 'BSD';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY_BYN = 'BYN';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUC = 'CUC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_CVE = 'CVE';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_FJD = 'FJD';
    const CURRENCY_FKP = 'FKP';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_GHS = 'GHS';
    const CURRENCY_GIP = 'GIP';
    const CURRENCY_GMD = 'GMD';
    const CURRENCY_GNF = 'GNF';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_GYD = 'GYD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_INR = 'INR';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_KES = 'KES';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KMF = 'KMF';
    const CURRENCY_KPW = 'KPW';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_KYD = 'KYD';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_LRD = 'LRD';
    const CURRENCY_LSL = 'LSL';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_MGA = 'MGA';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_MRO = 'MRO';
    const CURRENCY_MUR = 'MUR';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_MWK = 'MWK';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_MZN = 'MZN';
    const CURRENCY_NAD = 'NAD';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PGK = 'PGK';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SBD = 'SBD';
    const CURRENCY_SCR = 'SCR';
    const CURRENCY_SDG = 'SDG';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_SHP = 'SHP';
    const CURRENCY_SLL = 'SLL';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_SSP = 'SSP';
    const CURRENCY_STD = 'STD';
    const CURRENCY_SVC = 'SVC';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_SZL = 'SZL';
    const CURRENCY_THB = 'THB';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_TND = 'TND';
    const CURRENCY_TOP = 'TOP';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_TZS = 'TZS';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UGX = 'UGX';
    const CURRENCY_USD = 'USD';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_VND = 'VND';
    const CURRENCY_VUV = 'VUV';
    const CURRENCY_WST = 'WST';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_XAG = 'XAG';
    const CURRENCY_XAU = 'XAU';
    const CURRENCY_XBA = 'XBA';
    const CURRENCY_XBB = 'XBB';
    const CURRENCY_XBC = 'XBC';
    const CURRENCY_XBD = 'XBD';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_XPD = 'XPD';
    const CURRENCY_XPF = 'XPF';
    const CURRENCY_XPT = 'XPT';
    const CURRENCY_XSU = 'XSU';
    const CURRENCY_XTS = 'XTS';
    const CURRENCY_XUA = 'XUA';
    const CURRENCY_XXX = 'XXX';
    const CURRENCY_YER = 'YER';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ZMW = 'ZMW';
    const CURRENCY_ZWL = 'ZWL';
    const TRANSACTION_CURRENCY_AED = 'AED';
    const TRANSACTION_CURRENCY_AFN = 'AFN';
    const TRANSACTION_CURRENCY_ALL = 'ALL';
    const TRANSACTION_CURRENCY_AMD = 'AMD';
    const TRANSACTION_CURRENCY_ANG = 'ANG';
    const TRANSACTION_CURRENCY_AOA = 'AOA';
    const TRANSACTION_CURRENCY_ARS = 'ARS';
    const TRANSACTION_CURRENCY_AUD = 'AUD';
    const TRANSACTION_CURRENCY_AWG = 'AWG';
    const TRANSACTION_CURRENCY_AZN = 'AZN';
    const TRANSACTION_CURRENCY_BAM = 'BAM';
    const TRANSACTION_CURRENCY_BBD = 'BBD';
    const TRANSACTION_CURRENCY_BDT = 'BDT';
    const TRANSACTION_CURRENCY_BGN = 'BGN';
    const TRANSACTION_CURRENCY_BHD = 'BHD';
    const TRANSACTION_CURRENCY_BIF = 'BIF';
    const TRANSACTION_CURRENCY_BMD = 'BMD';
    const TRANSACTION_CURRENCY_BND = 'BND';
    const TRANSACTION_CURRENCY_BOB = 'BOB';
    const TRANSACTION_CURRENCY_BRL = 'BRL';
    const TRANSACTION_CURRENCY_BSD = 'BSD';
    const TRANSACTION_CURRENCY_BTN = 'BTN';
    const TRANSACTION_CURRENCY_BWP = 'BWP';
    const TRANSACTION_CURRENCY_BYN = 'BYN';
    const TRANSACTION_CURRENCY_BZD = 'BZD';
    const TRANSACTION_CURRENCY_CAD = 'CAD';
    const TRANSACTION_CURRENCY_CDF = 'CDF';
    const TRANSACTION_CURRENCY_CHF = 'CHF';
    const TRANSACTION_CURRENCY_CLP = 'CLP';
    const TRANSACTION_CURRENCY_CNY = 'CNY';
    const TRANSACTION_CURRENCY_COP = 'COP';
    const TRANSACTION_CURRENCY_CRC = 'CRC';
    const TRANSACTION_CURRENCY_CUC = 'CUC';
    const TRANSACTION_CURRENCY_CUP = 'CUP';
    const TRANSACTION_CURRENCY_CVE = 'CVE';
    const TRANSACTION_CURRENCY_CZK = 'CZK';
    const TRANSACTION_CURRENCY_DJF = 'DJF';
    const TRANSACTION_CURRENCY_DKK = 'DKK';
    const TRANSACTION_CURRENCY_DOP = 'DOP';
    const TRANSACTION_CURRENCY_DZD = 'DZD';
    const TRANSACTION_CURRENCY_EGP = 'EGP';
    const TRANSACTION_CURRENCY_ERN = 'ERN';
    const TRANSACTION_CURRENCY_ETB = 'ETB';
    const TRANSACTION_CURRENCY_EUR = 'EUR';
    const TRANSACTION_CURRENCY_FJD = 'FJD';
    const TRANSACTION_CURRENCY_FKP = 'FKP';
    const TRANSACTION_CURRENCY_GBP = 'GBP';
    const TRANSACTION_CURRENCY_GEL = 'GEL';
    const TRANSACTION_CURRENCY_GHS = 'GHS';
    const TRANSACTION_CURRENCY_GIP = 'GIP';
    const TRANSACTION_CURRENCY_GMD = 'GMD';
    const TRANSACTION_CURRENCY_GNF = 'GNF';
    const TRANSACTION_CURRENCY_GTQ = 'GTQ';
    const TRANSACTION_CURRENCY_GYD = 'GYD';
    const TRANSACTION_CURRENCY_HKD = 'HKD';
    const TRANSACTION_CURRENCY_HNL = 'HNL';
    const TRANSACTION_CURRENCY_HRK = 'HRK';
    const TRANSACTION_CURRENCY_HTG = 'HTG';
    const TRANSACTION_CURRENCY_HUF = 'HUF';
    const TRANSACTION_CURRENCY_IDR = 'IDR';
    const TRANSACTION_CURRENCY_ILS = 'ILS';
    const TRANSACTION_CURRENCY_INR = 'INR';
    const TRANSACTION_CURRENCY_IQD = 'IQD';
    const TRANSACTION_CURRENCY_IRR = 'IRR';
    const TRANSACTION_CURRENCY_ISK = 'ISK';
    const TRANSACTION_CURRENCY_JMD = 'JMD';
    const TRANSACTION_CURRENCY_JOD = 'JOD';
    const TRANSACTION_CURRENCY_JPY = 'JPY';
    const TRANSACTION_CURRENCY_KES = 'KES';
    const TRANSACTION_CURRENCY_KGS = 'KGS';
    const TRANSACTION_CURRENCY_KHR = 'KHR';
    const TRANSACTION_CURRENCY_KMF = 'KMF';
    const TRANSACTION_CURRENCY_KPW = 'KPW';
    const TRANSACTION_CURRENCY_KRW = 'KRW';
    const TRANSACTION_CURRENCY_KWD = 'KWD';
    const TRANSACTION_CURRENCY_KYD = 'KYD';
    const TRANSACTION_CURRENCY_KZT = 'KZT';
    const TRANSACTION_CURRENCY_LAK = 'LAK';
    const TRANSACTION_CURRENCY_LBP = 'LBP';
    const TRANSACTION_CURRENCY_LKR = 'LKR';
    const TRANSACTION_CURRENCY_LRD = 'LRD';
    const TRANSACTION_CURRENCY_LSL = 'LSL';
    const TRANSACTION_CURRENCY_LYD = 'LYD';
    const TRANSACTION_CURRENCY_MAD = 'MAD';
    const TRANSACTION_CURRENCY_MDL = 'MDL';
    const TRANSACTION_CURRENCY_MGA = 'MGA';
    const TRANSACTION_CURRENCY_MKD = 'MKD';
    const TRANSACTION_CURRENCY_MMK = 'MMK';
    const TRANSACTION_CURRENCY_MNT = 'MNT';
    const TRANSACTION_CURRENCY_MOP = 'MOP';
    const TRANSACTION_CURRENCY_MRO = 'MRO';
    const TRANSACTION_CURRENCY_MUR = 'MUR';
    const TRANSACTION_CURRENCY_MVR = 'MVR';
    const TRANSACTION_CURRENCY_MWK = 'MWK';
    const TRANSACTION_CURRENCY_MXN = 'MXN';
    const TRANSACTION_CURRENCY_MYR = 'MYR';
    const TRANSACTION_CURRENCY_MZN = 'MZN';
    const TRANSACTION_CURRENCY_NAD = 'NAD';
    const TRANSACTION_CURRENCY_NGN = 'NGN';
    const TRANSACTION_CURRENCY_NIO = 'NIO';
    const TRANSACTION_CURRENCY_NOK = 'NOK';
    const TRANSACTION_CURRENCY_NPR = 'NPR';
    const TRANSACTION_CURRENCY_NZD = 'NZD';
    const TRANSACTION_CURRENCY_OMR = 'OMR';
    const TRANSACTION_CURRENCY_PAB = 'PAB';
    const TRANSACTION_CURRENCY_PEN = 'PEN';
    const TRANSACTION_CURRENCY_PGK = 'PGK';
    const TRANSACTION_CURRENCY_PHP = 'PHP';
    const TRANSACTION_CURRENCY_PKR = 'PKR';
    const TRANSACTION_CURRENCY_PLN = 'PLN';
    const TRANSACTION_CURRENCY_PYG = 'PYG';
    const TRANSACTION_CURRENCY_QAR = 'QAR';
    const TRANSACTION_CURRENCY_RON = 'RON';
    const TRANSACTION_CURRENCY_RSD = 'RSD';
    const TRANSACTION_CURRENCY_RUB = 'RUB';
    const TRANSACTION_CURRENCY_RWF = 'RWF';
    const TRANSACTION_CURRENCY_SAR = 'SAR';
    const TRANSACTION_CURRENCY_SBD = 'SBD';
    const TRANSACTION_CURRENCY_SCR = 'SCR';
    const TRANSACTION_CURRENCY_SDG = 'SDG';
    const TRANSACTION_CURRENCY_SEK = 'SEK';
    const TRANSACTION_CURRENCY_SGD = 'SGD';
    const TRANSACTION_CURRENCY_SHP = 'SHP';
    const TRANSACTION_CURRENCY_SLL = 'SLL';
    const TRANSACTION_CURRENCY_SOS = 'SOS';
    const TRANSACTION_CURRENCY_SRD = 'SRD';
    const TRANSACTION_CURRENCY_SSP = 'SSP';
    const TRANSACTION_CURRENCY_STD = 'STD';
    const TRANSACTION_CURRENCY_SVC = 'SVC';
    const TRANSACTION_CURRENCY_SYP = 'SYP';
    const TRANSACTION_CURRENCY_SZL = 'SZL';
    const TRANSACTION_CURRENCY_THB = 'THB';
    const TRANSACTION_CURRENCY_TJS = 'TJS';
    const TRANSACTION_CURRENCY_TMT = 'TMT';
    const TRANSACTION_CURRENCY_TND = 'TND';
    const TRANSACTION_CURRENCY_TOP = 'TOP';
    const TRANSACTION_CURRENCY__TRY = 'TRY';
    const TRANSACTION_CURRENCY_TTD = 'TTD';
    const TRANSACTION_CURRENCY_TWD = 'TWD';
    const TRANSACTION_CURRENCY_TZS = 'TZS';
    const TRANSACTION_CURRENCY_UAH = 'UAH';
    const TRANSACTION_CURRENCY_UGX = 'UGX';
    const TRANSACTION_CURRENCY_USD = 'USD';
    const TRANSACTION_CURRENCY_UYU = 'UYU';
    const TRANSACTION_CURRENCY_UZS = 'UZS';
    const TRANSACTION_CURRENCY_VEF = 'VEF';
    const TRANSACTION_CURRENCY_VND = 'VND';
    const TRANSACTION_CURRENCY_VUV = 'VUV';
    const TRANSACTION_CURRENCY_WST = 'WST';
    const TRANSACTION_CURRENCY_XAF = 'XAF';
    const TRANSACTION_CURRENCY_XAG = 'XAG';
    const TRANSACTION_CURRENCY_XAU = 'XAU';
    const TRANSACTION_CURRENCY_XBA = 'XBA';
    const TRANSACTION_CURRENCY_XBB = 'XBB';
    const TRANSACTION_CURRENCY_XBC = 'XBC';
    const TRANSACTION_CURRENCY_XBD = 'XBD';
    const TRANSACTION_CURRENCY_XCD = 'XCD';
    const TRANSACTION_CURRENCY_XDR = 'XDR';
    const TRANSACTION_CURRENCY_XOF = 'XOF';
    const TRANSACTION_CURRENCY_XPD = 'XPD';
    const TRANSACTION_CURRENCY_XPF = 'XPF';
    const TRANSACTION_CURRENCY_XPT = 'XPT';
    const TRANSACTION_CURRENCY_XSU = 'XSU';
    const TRANSACTION_CURRENCY_XTS = 'XTS';
    const TRANSACTION_CURRENCY_XUA = 'XUA';
    const TRANSACTION_CURRENCY_XXX = 'XXX';
    const TRANSACTION_CURRENCY_YER = 'YER';
    const TRANSACTION_CURRENCY_ZAR = 'ZAR';
    const TRANSACTION_CURRENCY_ZMW = 'ZMW';
    const TRANSACTION_CURRENCY_ZWL = 'ZWL';
    const STATE_DRAFT = 'draft';
    const STATE_ISSUED = 'issued';
    const STATE_PAID = 'paid';
    const STATE_CANCELED = 'canceled';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_AED,
            self::CURRENCY_AFN,
            self::CURRENCY_ALL,
            self::CURRENCY_AMD,
            self::CURRENCY_ANG,
            self::CURRENCY_AOA,
            self::CURRENCY_ARS,
            self::CURRENCY_AUD,
            self::CURRENCY_AWG,
            self::CURRENCY_AZN,
            self::CURRENCY_BAM,
            self::CURRENCY_BBD,
            self::CURRENCY_BDT,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BIF,
            self::CURRENCY_BMD,
            self::CURRENCY_BND,
            self::CURRENCY_BOB,
            self::CURRENCY_BRL,
            self::CURRENCY_BSD,
            self::CURRENCY_BTN,
            self::CURRENCY_BWP,
            self::CURRENCY_BYN,
            self::CURRENCY_BZD,
            self::CURRENCY_CAD,
            self::CURRENCY_CDF,
            self::CURRENCY_CHF,
            self::CURRENCY_CLP,
            self::CURRENCY_CNY,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUC,
            self::CURRENCY_CUP,
            self::CURRENCY_CVE,
            self::CURRENCY_CZK,
            self::CURRENCY_DJF,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_ERN,
            self::CURRENCY_ETB,
            self::CURRENCY_EUR,
            self::CURRENCY_FJD,
            self::CURRENCY_FKP,
            self::CURRENCY_GBP,
            self::CURRENCY_GEL,
            self::CURRENCY_GHS,
            self::CURRENCY_GIP,
            self::CURRENCY_GMD,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HKD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HTG,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_INR,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_ISK,
            self::CURRENCY_JMD,
            self::CURRENCY_JOD,
            self::CURRENCY_JPY,
            self::CURRENCY_KES,
            self::CURRENCY_KGS,
            self::CURRENCY_KHR,
            self::CURRENCY_KMF,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KYD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LKR,
            self::CURRENCY_LRD,
            self::CURRENCY_LSL,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_MDL,
            self::CURRENCY_MGA,
            self::CURRENCY_MKD,
            self::CURRENCY_MMK,
            self::CURRENCY_MNT,
            self::CURRENCY_MOP,
            self::CURRENCY_MRO,
            self::CURRENCY_MUR,
            self::CURRENCY_MVR,
            self::CURRENCY_MWK,
            self::CURRENCY_MXN,
            self::CURRENCY_MYR,
            self::CURRENCY_MZN,
            self::CURRENCY_NAD,
            self::CURRENCY_NGN,
            self::CURRENCY_NIO,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_NZD,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PGK,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RSD,
            self::CURRENCY_RUB,
            self::CURRENCY_RWF,
            self::CURRENCY_SAR,
            self::CURRENCY_SBD,
            self::CURRENCY_SCR,
            self::CURRENCY_SDG,
            self::CURRENCY_SEK,
            self::CURRENCY_SGD,
            self::CURRENCY_SHP,
            self::CURRENCY_SLL,
            self::CURRENCY_SOS,
            self::CURRENCY_SRD,
            self::CURRENCY_SSP,
            self::CURRENCY_STD,
            self::CURRENCY_SVC,
            self::CURRENCY_SYP,
            self::CURRENCY_SZL,
            self::CURRENCY_THB,
            self::CURRENCY_TJS,
            self::CURRENCY_TMT,
            self::CURRENCY_TND,
            self::CURRENCY_TOP,
            self::CURRENCY__TRY,
            self::CURRENCY_TTD,
            self::CURRENCY_TWD,
            self::CURRENCY_TZS,
            self::CURRENCY_UAH,
            self::CURRENCY_UGX,
            self::CURRENCY_USD,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_VEF,
            self::CURRENCY_VND,
            self::CURRENCY_VUV,
            self::CURRENCY_WST,
            self::CURRENCY_XAF,
            self::CURRENCY_XAG,
            self::CURRENCY_XAU,
            self::CURRENCY_XBA,
            self::CURRENCY_XBB,
            self::CURRENCY_XBC,
            self::CURRENCY_XBD,
            self::CURRENCY_XCD,
            self::CURRENCY_XDR,
            self::CURRENCY_XOF,
            self::CURRENCY_XPD,
            self::CURRENCY_XPF,
            self::CURRENCY_XPT,
            self::CURRENCY_XSU,
            self::CURRENCY_XTS,
            self::CURRENCY_XUA,
            self::CURRENCY_XXX,
            self::CURRENCY_YER,
            self::CURRENCY_ZAR,
            self::CURRENCY_ZMW,
            self::CURRENCY_ZWL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCurrencyAllowableValues()
    {
        return [
            self::TRANSACTION_CURRENCY_AED,
            self::TRANSACTION_CURRENCY_AFN,
            self::TRANSACTION_CURRENCY_ALL,
            self::TRANSACTION_CURRENCY_AMD,
            self::TRANSACTION_CURRENCY_ANG,
            self::TRANSACTION_CURRENCY_AOA,
            self::TRANSACTION_CURRENCY_ARS,
            self::TRANSACTION_CURRENCY_AUD,
            self::TRANSACTION_CURRENCY_AWG,
            self::TRANSACTION_CURRENCY_AZN,
            self::TRANSACTION_CURRENCY_BAM,
            self::TRANSACTION_CURRENCY_BBD,
            self::TRANSACTION_CURRENCY_BDT,
            self::TRANSACTION_CURRENCY_BGN,
            self::TRANSACTION_CURRENCY_BHD,
            self::TRANSACTION_CURRENCY_BIF,
            self::TRANSACTION_CURRENCY_BMD,
            self::TRANSACTION_CURRENCY_BND,
            self::TRANSACTION_CURRENCY_BOB,
            self::TRANSACTION_CURRENCY_BRL,
            self::TRANSACTION_CURRENCY_BSD,
            self::TRANSACTION_CURRENCY_BTN,
            self::TRANSACTION_CURRENCY_BWP,
            self::TRANSACTION_CURRENCY_BYN,
            self::TRANSACTION_CURRENCY_BZD,
            self::TRANSACTION_CURRENCY_CAD,
            self::TRANSACTION_CURRENCY_CDF,
            self::TRANSACTION_CURRENCY_CHF,
            self::TRANSACTION_CURRENCY_CLP,
            self::TRANSACTION_CURRENCY_CNY,
            self::TRANSACTION_CURRENCY_COP,
            self::TRANSACTION_CURRENCY_CRC,
            self::TRANSACTION_CURRENCY_CUC,
            self::TRANSACTION_CURRENCY_CUP,
            self::TRANSACTION_CURRENCY_CVE,
            self::TRANSACTION_CURRENCY_CZK,
            self::TRANSACTION_CURRENCY_DJF,
            self::TRANSACTION_CURRENCY_DKK,
            self::TRANSACTION_CURRENCY_DOP,
            self::TRANSACTION_CURRENCY_DZD,
            self::TRANSACTION_CURRENCY_EGP,
            self::TRANSACTION_CURRENCY_ERN,
            self::TRANSACTION_CURRENCY_ETB,
            self::TRANSACTION_CURRENCY_EUR,
            self::TRANSACTION_CURRENCY_FJD,
            self::TRANSACTION_CURRENCY_FKP,
            self::TRANSACTION_CURRENCY_GBP,
            self::TRANSACTION_CURRENCY_GEL,
            self::TRANSACTION_CURRENCY_GHS,
            self::TRANSACTION_CURRENCY_GIP,
            self::TRANSACTION_CURRENCY_GMD,
            self::TRANSACTION_CURRENCY_GNF,
            self::TRANSACTION_CURRENCY_GTQ,
            self::TRANSACTION_CURRENCY_GYD,
            self::TRANSACTION_CURRENCY_HKD,
            self::TRANSACTION_CURRENCY_HNL,
            self::TRANSACTION_CURRENCY_HRK,
            self::TRANSACTION_CURRENCY_HTG,
            self::TRANSACTION_CURRENCY_HUF,
            self::TRANSACTION_CURRENCY_IDR,
            self::TRANSACTION_CURRENCY_ILS,
            self::TRANSACTION_CURRENCY_INR,
            self::TRANSACTION_CURRENCY_IQD,
            self::TRANSACTION_CURRENCY_IRR,
            self::TRANSACTION_CURRENCY_ISK,
            self::TRANSACTION_CURRENCY_JMD,
            self::TRANSACTION_CURRENCY_JOD,
            self::TRANSACTION_CURRENCY_JPY,
            self::TRANSACTION_CURRENCY_KES,
            self::TRANSACTION_CURRENCY_KGS,
            self::TRANSACTION_CURRENCY_KHR,
            self::TRANSACTION_CURRENCY_KMF,
            self::TRANSACTION_CURRENCY_KPW,
            self::TRANSACTION_CURRENCY_KRW,
            self::TRANSACTION_CURRENCY_KWD,
            self::TRANSACTION_CURRENCY_KYD,
            self::TRANSACTION_CURRENCY_KZT,
            self::TRANSACTION_CURRENCY_LAK,
            self::TRANSACTION_CURRENCY_LBP,
            self::TRANSACTION_CURRENCY_LKR,
            self::TRANSACTION_CURRENCY_LRD,
            self::TRANSACTION_CURRENCY_LSL,
            self::TRANSACTION_CURRENCY_LYD,
            self::TRANSACTION_CURRENCY_MAD,
            self::TRANSACTION_CURRENCY_MDL,
            self::TRANSACTION_CURRENCY_MGA,
            self::TRANSACTION_CURRENCY_MKD,
            self::TRANSACTION_CURRENCY_MMK,
            self::TRANSACTION_CURRENCY_MNT,
            self::TRANSACTION_CURRENCY_MOP,
            self::TRANSACTION_CURRENCY_MRO,
            self::TRANSACTION_CURRENCY_MUR,
            self::TRANSACTION_CURRENCY_MVR,
            self::TRANSACTION_CURRENCY_MWK,
            self::TRANSACTION_CURRENCY_MXN,
            self::TRANSACTION_CURRENCY_MYR,
            self::TRANSACTION_CURRENCY_MZN,
            self::TRANSACTION_CURRENCY_NAD,
            self::TRANSACTION_CURRENCY_NGN,
            self::TRANSACTION_CURRENCY_NIO,
            self::TRANSACTION_CURRENCY_NOK,
            self::TRANSACTION_CURRENCY_NPR,
            self::TRANSACTION_CURRENCY_NZD,
            self::TRANSACTION_CURRENCY_OMR,
            self::TRANSACTION_CURRENCY_PAB,
            self::TRANSACTION_CURRENCY_PEN,
            self::TRANSACTION_CURRENCY_PGK,
            self::TRANSACTION_CURRENCY_PHP,
            self::TRANSACTION_CURRENCY_PKR,
            self::TRANSACTION_CURRENCY_PLN,
            self::TRANSACTION_CURRENCY_PYG,
            self::TRANSACTION_CURRENCY_QAR,
            self::TRANSACTION_CURRENCY_RON,
            self::TRANSACTION_CURRENCY_RSD,
            self::TRANSACTION_CURRENCY_RUB,
            self::TRANSACTION_CURRENCY_RWF,
            self::TRANSACTION_CURRENCY_SAR,
            self::TRANSACTION_CURRENCY_SBD,
            self::TRANSACTION_CURRENCY_SCR,
            self::TRANSACTION_CURRENCY_SDG,
            self::TRANSACTION_CURRENCY_SEK,
            self::TRANSACTION_CURRENCY_SGD,
            self::TRANSACTION_CURRENCY_SHP,
            self::TRANSACTION_CURRENCY_SLL,
            self::TRANSACTION_CURRENCY_SOS,
            self::TRANSACTION_CURRENCY_SRD,
            self::TRANSACTION_CURRENCY_SSP,
            self::TRANSACTION_CURRENCY_STD,
            self::TRANSACTION_CURRENCY_SVC,
            self::TRANSACTION_CURRENCY_SYP,
            self::TRANSACTION_CURRENCY_SZL,
            self::TRANSACTION_CURRENCY_THB,
            self::TRANSACTION_CURRENCY_TJS,
            self::TRANSACTION_CURRENCY_TMT,
            self::TRANSACTION_CURRENCY_TND,
            self::TRANSACTION_CURRENCY_TOP,
            self::TRANSACTION_CURRENCY__TRY,
            self::TRANSACTION_CURRENCY_TTD,
            self::TRANSACTION_CURRENCY_TWD,
            self::TRANSACTION_CURRENCY_TZS,
            self::TRANSACTION_CURRENCY_UAH,
            self::TRANSACTION_CURRENCY_UGX,
            self::TRANSACTION_CURRENCY_USD,
            self::TRANSACTION_CURRENCY_UYU,
            self::TRANSACTION_CURRENCY_UZS,
            self::TRANSACTION_CURRENCY_VEF,
            self::TRANSACTION_CURRENCY_VND,
            self::TRANSACTION_CURRENCY_VUV,
            self::TRANSACTION_CURRENCY_WST,
            self::TRANSACTION_CURRENCY_XAF,
            self::TRANSACTION_CURRENCY_XAG,
            self::TRANSACTION_CURRENCY_XAU,
            self::TRANSACTION_CURRENCY_XBA,
            self::TRANSACTION_CURRENCY_XBB,
            self::TRANSACTION_CURRENCY_XBC,
            self::TRANSACTION_CURRENCY_XBD,
            self::TRANSACTION_CURRENCY_XCD,
            self::TRANSACTION_CURRENCY_XDR,
            self::TRANSACTION_CURRENCY_XOF,
            self::TRANSACTION_CURRENCY_XPD,
            self::TRANSACTION_CURRENCY_XPF,
            self::TRANSACTION_CURRENCY_XPT,
            self::TRANSACTION_CURRENCY_XSU,
            self::TRANSACTION_CURRENCY_XTS,
            self::TRANSACTION_CURRENCY_XUA,
            self::TRANSACTION_CURRENCY_XXX,
            self::TRANSACTION_CURRENCY_YER,
            self::TRANSACTION_CURRENCY_ZAR,
            self::TRANSACTION_CURRENCY_ZMW,
            self::TRANSACTION_CURRENCY_ZWL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_DRAFT,
            self::STATE_ISSUED,
            self::STATE_PAID,
            self::STATE_CANCELED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['series'] = isset($data['series']) ? $data['series'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['archived_provider'] = isset($data['archived_provider']) ? $data['archived_provider'] : null;
        $this->container['archived_customer'] = isset($data['archived_customer']) ? $data['archived_customer'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['paid_date'] = isset($data['paid_date']) ? $data['paid_date'] : null;
        $this->container['cancel_date'] = isset($data['cancel_date']) ? $data['cancel_date'] : null;
        $this->container['sales_tax_name'] = isset($data['sales_tax_name']) ? $data['sales_tax_name'] : null;
        $this->container['sales_tax_percent'] = isset($data['sales_tax_percent']) ? $data['sales_tax_percent'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['transaction_currency'] = isset($data['transaction_currency']) ? $data['transaction_currency'] : null;
        $this->container['transaction_xe_rate'] = isset($data['transaction_xe_rate']) ? $data['transaction_xe_rate'] : null;
        $this->container['transaction_xe_date'] = isset($data['transaction_xe_date']) ? $data['transaction_xe_date'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['proforma'] = isset($data['proforma']) ? $data['proforma'] : null;
        $this->container['invoice_entries'] = isset($data['invoice_entries']) ? $data['invoice_entries'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['total_in_transaction_currency'] = isset($data['total_in_transaction_currency']) ? $data['total_in_transaction_currency'] : null;
        $this->container['pdf_url'] = isset($data['pdf_url']) ? $data['pdf_url'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['series']) && (mb_strlen($this->container['series']) > 20)) {
            $invalidProperties[] = "invalid value for 'series', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['number']) && ($this->container['number'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'number', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['number']) && ($this->container['number'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'number', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if (!is_null($this->container['sales_tax_name']) && (mb_strlen($this->container['sales_tax_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'sales_tax_name', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionCurrencyAllowableValues();
        if (!is_null($this->container['transaction_currency']) && !in_array($this->container['transaction_currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets series
     *
     * @return string
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param string $series series
     *
     * @return $this
     */
    public function setSeries($series)
    {
        if (!is_null($series) && (mb_strlen($series) > 20)) {
            throw new \InvalidArgumentException('invalid length for $series when calling Invoice., must be smaller than or equal to 20.');
        }

        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {

        if (!is_null($number) && ($number > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $number when calling Invoice., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($number) && ($number < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $number when calling Invoice., must be bigger than or equal to -2147483648.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets archived_provider
     *
     * @return object
     */
    public function getArchivedProvider()
    {
        return $this->container['archived_provider'];
    }

    /**
     * Sets archived_provider
     *
     * @param object $archived_provider archived_provider
     *
     * @return $this
     */
    public function setArchivedProvider($archived_provider)
    {
        $this->container['archived_provider'] = $archived_provider;

        return $this;
    }

    /**
     * Gets archived_customer
     *
     * @return object
     */
    public function getArchivedCustomer()
    {
        return $this->container['archived_customer'];
    }

    /**
     * Sets archived_customer
     *
     * @param object $archived_customer archived_customer
     *
     * @return $this
     */
    public function setArchivedCustomer($archived_customer)
    {
        $this->container['archived_customer'] = $archived_customer;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime $issue_date issue_date
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return \DateTime
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param \DateTime $paid_date paid_date
     *
     * @return $this
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets cancel_date
     *
     * @return \DateTime
     */
    public function getCancelDate()
    {
        return $this->container['cancel_date'];
    }

    /**
     * Sets cancel_date
     *
     * @param \DateTime $cancel_date cancel_date
     *
     * @return $this
     */
    public function setCancelDate($cancel_date)
    {
        $this->container['cancel_date'] = $cancel_date;

        return $this;
    }

    /**
     * Gets sales_tax_name
     *
     * @return string
     */
    public function getSalesTaxName()
    {
        return $this->container['sales_tax_name'];
    }

    /**
     * Sets sales_tax_name
     *
     * @param string $sales_tax_name sales_tax_name
     *
     * @return $this
     */
    public function setSalesTaxName($sales_tax_name)
    {
        if (!is_null($sales_tax_name) && (mb_strlen($sales_tax_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $sales_tax_name when calling Invoice., must be smaller than or equal to 64.');
        }

        $this->container['sales_tax_name'] = $sales_tax_name;

        return $this;
    }

    /**
     * Gets sales_tax_percent
     *
     * @return string
     */
    public function getSalesTaxPercent()
    {
        return $this->container['sales_tax_percent'];
    }

    /**
     * Sets sales_tax_percent
     *
     * @param string $sales_tax_percent sales_tax_percent
     *
     * @return $this
     */
    public function setSalesTaxPercent($sales_tax_percent)
    {
        $this->container['sales_tax_percent'] = $sales_tax_percent;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency used for billing.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string $transaction_currency The currency used when making a transaction.
     *
     * @return $this
     */
    public function setTransactionCurrency($transaction_currency)
    {
        $allowedValues = $this->getTransactionCurrencyAllowableValues();
        if (!is_null($transaction_currency) && !in_array($transaction_currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets transaction_xe_rate
     *
     * @return string
     */
    public function getTransactionXeRate()
    {
        return $this->container['transaction_xe_rate'];
    }

    /**
     * Sets transaction_xe_rate
     *
     * @param string $transaction_xe_rate Currency exchange rate from document currency to transaction_currency.
     *
     * @return $this
     */
    public function setTransactionXeRate($transaction_xe_rate)
    {
        $this->container['transaction_xe_rate'] = $transaction_xe_rate;

        return $this;
    }

    /**
     * Gets transaction_xe_date
     *
     * @return \DateTime
     */
    public function getTransactionXeDate()
    {
        return $this->container['transaction_xe_date'];
    }

    /**
     * Sets transaction_xe_date
     *
     * @param \DateTime $transaction_xe_date Date of the transaction exchange rate.
     *
     * @return $this
     */
    public function setTransactionXeDate($transaction_xe_date)
    {
        $this->container['transaction_xe_date'] = $transaction_xe_date;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state the invoice is in.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets proforma
     *
     * @return string
     */
    public function getProforma()
    {
        return $this->container['proforma'];
    }

    /**
     * Sets proforma
     *
     * @param string $proforma proforma
     *
     * @return $this
     */
    public function setProforma($proforma)
    {
        $this->container['proforma'] = $proforma;

        return $this;
    }

    /**
     * Gets invoice_entries
     *
     * @return \Swagger\Client\Model\DocumentEntry[]
     */
    public function getInvoiceEntries()
    {
        return $this->container['invoice_entries'];
    }

    /**
     * Sets invoice_entries
     *
     * @param \Swagger\Client\Model\DocumentEntry[] $invoice_entries invoice_entries
     *
     * @return $this
     */
    public function setInvoiceEntries($invoice_entries)
    {
        $this->container['invoice_entries'] = $invoice_entries;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_in_transaction_currency
     *
     * @return string
     */
    public function getTotalInTransactionCurrency()
    {
        return $this->container['total_in_transaction_currency'];
    }

    /**
     * Sets total_in_transaction_currency
     *
     * @param string $total_in_transaction_currency total_in_transaction_currency
     *
     * @return $this
     */
    public function setTotalInTransactionCurrency($total_in_transaction_currency)
    {
        $this->container['total_in_transaction_currency'] = $total_in_transaction_currency;

        return $this;
    }

    /**
     * Gets pdf_url
     *
     * @return string
     */
    public function getPdfUrl()
    {
        return $this->container['pdf_url'];
    }

    /**
     * Sets pdf_url
     *
     * @param string $pdf_url pdf_url
     *
     * @return $this
     */
    public function setPdfUrl($pdf_url)
    {
        $this->container['pdf_url'] = $pdf_url;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Swagger\Client\Model\Transaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Swagger\Client\Model\Transaction[] $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


