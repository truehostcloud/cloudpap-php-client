<?php
/**
 * PaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudPap Console API
 *
 * CloudPap Console API
 *
 * OpenAPI spec version: v1
 * Contact: info@cloudpap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.33
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentMethod Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'transactions' => 'string',
        'customer' => 'string',
        'payment_processor_name' => 'string',
        'payment_processor' => 'string',
        'added_at' => '\DateTime',
        'verified' => 'bool',
        'canceled' => 'bool',
        'valid_until' => '\DateTime',
        'display_info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => 'uri',
        'transactions' => 'uri',
        'customer' => 'uri',
        'payment_processor_name' => null,
        'payment_processor' => null,
        'added_at' => 'date-time',
        'verified' => null,
        'canceled' => null,
        'valid_until' => 'date-time',
        'display_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'transactions' => 'transactions',
        'customer' => 'customer',
        'payment_processor_name' => 'payment_processor_name',
        'payment_processor' => 'payment_processor',
        'added_at' => 'added_at',
        'verified' => 'verified',
        'canceled' => 'canceled',
        'valid_until' => 'valid_until',
        'display_info' => 'display_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'transactions' => 'setTransactions',
        'customer' => 'setCustomer',
        'payment_processor_name' => 'setPaymentProcessorName',
        'payment_processor' => 'setPaymentProcessor',
        'added_at' => 'setAddedAt',
        'verified' => 'setVerified',
        'canceled' => 'setCanceled',
        'valid_until' => 'setValidUntil',
        'display_info' => 'setDisplayInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'transactions' => 'getTransactions',
        'customer' => 'getCustomer',
        'payment_processor_name' => 'getPaymentProcessorName',
        'payment_processor' => 'getPaymentProcessor',
        'added_at' => 'getAddedAt',
        'verified' => 'getVerified',
        'canceled' => 'getCanceled',
        'valid_until' => 'getValidUntil',
        'display_info' => 'getDisplayInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['payment_processor_name'] = isset($data['payment_processor_name']) ? $data['payment_processor_name'] : null;
        $this->container['payment_processor'] = isset($data['payment_processor']) ? $data['payment_processor'] : null;
        $this->container['added_at'] = isset($data['added_at']) ? $data['added_at'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['valid_until'] = isset($data['valid_until']) ? $data['valid_until'] : null;
        $this->container['display_info'] = isset($data['display_info']) ? $data['display_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_processor_name'] === null) {
            $invalidProperties[] = "'payment_processor_name' can't be null";
        }
        if (!is_null($this->container['display_info']) && (mb_strlen($this->container['display_info']) > 256)) {
            $invalidProperties[] = "invalid value for 'display_info', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return string
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param string $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets payment_processor_name
     *
     * @return string
     */
    public function getPaymentProcessorName()
    {
        return $this->container['payment_processor_name'];
    }

    /**
     * Sets payment_processor_name
     *
     * @param string $payment_processor_name payment_processor_name
     *
     * @return $this
     */
    public function setPaymentProcessorName($payment_processor_name)
    {
        $this->container['payment_processor_name'] = $payment_processor_name;

        return $this;
    }

    /**
     * Gets payment_processor
     *
     * @return string
     */
    public function getPaymentProcessor()
    {
        return $this->container['payment_processor'];
    }

    /**
     * Sets payment_processor
     *
     * @param string $payment_processor payment_processor
     *
     * @return $this
     */
    public function setPaymentProcessor($payment_processor)
    {
        $this->container['payment_processor'] = $payment_processor;

        return $this;
    }

    /**
     * Gets added_at
     *
     * @return \DateTime
     */
    public function getAddedAt()
    {
        return $this->container['added_at'];
    }

    /**
     * Sets added_at
     *
     * @param \DateTime $added_at added_at
     *
     * @return $this
     */
    public function setAddedAt($added_at)
    {
        $this->container['added_at'] = $added_at;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified verified
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled canceled
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until valid_until
     *
     * @return $this
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets display_info
     *
     * @return string
     */
    public function getDisplayInfo()
    {
        return $this->container['display_info'];
    }

    /**
     * Sets display_info
     *
     * @param string $display_info display_info
     *
     * @return $this
     */
    public function setDisplayInfo($display_info)
    {
        if (!is_null($display_info) && (mb_strlen($display_info) > 256)) {
            throw new \InvalidArgumentException('invalid length for $display_info when calling PaymentMethod., must be smaller than or equal to 256.');
        }

        $this->container['display_info'] = $display_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


